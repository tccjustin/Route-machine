{
    "source": "origin.pdf",
    "items": [
      {
        "Test case ID": "PHY-001",
        "Description": "PHY 와  연결되며,  EMAC  하드웨어  블록의  Register 에  대한  Host\n엑세스를 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1. Tester_1<->emac1<->emac2<->Tester_2 를 1 분동안 1G(100%) traffic 을 인가한다.\n1. Tester_1<->emac1<->emac2<->Tester_2 를 1 분동안 1G(100%)\ntraffic 을 인가한다.",
        "Input": "Port  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1",
        "Expected Result": "1. 패킷 손실 없이 패킷이 송수신된다.\n1. 패킷 손실 없이 패킷이 송수신된다.",
        "Test output": "PASS",
        "Test result": "-. Byte 별 성능은 성능시험으로 대체",
        "page": 21,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "PHY-002",
        "Description": "포트와 동시 스위칭 시 2Gbps Speed 를 제공해야 한다. EMAC 하드웨어\n블록의 Register 에 대한 Host 액세스를 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1. Tester_1 ↔ emac1(1G) ↔ emac3(1G) ↔ Tester_3 / Tester_2 ↔ emac2(1G) ↔ emac3(1G) ↔ Tester_4 의 구성으로 4G traffic 을 생성한다.\n2. 1 분동안 traffic 을 인가한다.\n2. 1 분동안 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2",
        "Input": "T1  00:00:00:00:11:11  00:00:00:00:33:33  100.1.1.1  100.1.1.3\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1\nT3  00:00:00:00:33:33  00:00:00:00:11:11  100.1.1.3  100.1.1.1",
        "Expected Result": "2. 패킷 손실 없이 정상적으로 송수신이 된다.\n2. 패킷 손실 없이 정상적으로 송수신이 된다.",
        "Test output": "PASS",
        "Test result": "-. Byte 별 성능은 성능시험으로 대체",
        "page": 22,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T3",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.1"
          }
        ],
        "Test Pattern": "packet send & receive & compare"
      },
      {
        "Test case ID": "PHY-003",
        "Description": "TPA 는 5Gbps 대역의 EMAC 1 개 포트를 제공해야 하며, 1G EMAC 2 개 포트와 2.5G EMAC 1 개 포트를 그룹핑하여 동시 스위칭 시 4Gbps Speed 제공해야 한다. 5G 포트는 XGMII 를 통해 외부 스위치와 연결되어 스위치에 대한 집선 기능을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1. Tester_1 ↔ emac4(1G) ↔ emac2(1G) ↔ Tester_3 / Tester_2 ↔ emac4(1G) ↔ emac1(1G) ↔ Tester_4 의 구성으로 4G traffic 을 생성한다.\n2. 100% traffic 을 1 분동안 인가한다.",
        "Input": "",
        "Expected Result": "2. 패킷 손실없이 패킷이 송수신된다.",
        "Test output": "NA",
        "Test result": "-. ES board 에서는 시험 불가, CS Board 에서 확인 가능",
        "page": 23,
        "Input_table": [],
        "Test Pattern": "packet send & receive & compare"
      },
      {
        "Test case ID": "PHY-004",
        "Description": "TPA 는 10Gbps 대역의 Host Interface (HIF)를 제공해야 하며, HIF 는 호스트 구성에 따라 하나 이상의 논리 채널 할당이 가능해야 한다. HIF 는 3 개의 논리 채널 (HIF-0, HIF-1, HIF-2)을 각 FreeRTOS, AutoSAR, Linux 호스트에 각각 할당 가능해야 하며 각 채널당 최대 1Gbps 의 송수신 속도를 제공해야 한다. HIF 의 논리채널은 각 호스트에서 네트워크 스택에 연결되며 논리 인터페이스로 동작할 수 있어야 한다.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "1. PC(iperf client) <-> emac1 <-> hif(iperf server)로 구성하여 성능을",
        "Sequence": "측정한다.",
        "Input": "",
        "Expected Result": "1. 1G 의 성능이 도출된다.\n",
        "Test output": "1. 1G 의 성능이 도출된다.",
        "Test result": "PASS",
        "page": 24,
        "Input_table": [],
        "Test Pattern": "iperf test"
      },
      {
        "Test case ID": "FCRL-001",
        "Description": "MAC 의 송신을 중단시키고 Pause Frame 에 지정된 시간 이후 송신을\n재개해야 한다.\n- EMAC 은 Overload 상황을 감지이벤트를 제공해야 한다.\n- Flow Control 기능은 활성 및 비 활성화가 가능해야 한다.",
        "Test Environment": "",
        "Test Method": "REVIEW",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "제약사항: Traffic overload Test case 생성 불가능",
        "Test result": "검토결과: 서비스 제약 없음",
        "page": 25,
        "Input_table": []
      },
      {
        "Test case ID": "MIB-001",
        "Description": "며, Clear시 모든 통계 값은 0으로 초기화 되어야 한다.\n-  HIF채널은 RMON  Subset MIB을 제공해야 하며, RMON Subset\nMIB은 HIF에서 수집 가능한 항목을 기반으로 정의한다.\n-  각 Register에 대한 설명은 “Kernel APIs 문서, 6.2 Interface” 내용\n을 참조하면 된다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "FAIL",
        "Test result": "-. tcs-122 mailbox log 출력되면서 동작안함",
        "page": 26,
        "Input_table": [],
        "Test Pattern": "RMON Monitoring"
      },
      {
        "Test case ID": "MIB-002",
        "Description": "확인한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "FAIL",
        "Test result": "-. tcs-122 mailbox log 출력되면서 동작안함",
        "page": 27,
        "Input_table": []
      },
      {
        "Test case ID": "MIB-003",
        "Description": "확인한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "FAIL",
        "Test result": "-. tcs-122 mailbox log 출력되면서 동작안함",
        "page": 28,
        "Input_table": []
      },
      {
        "Test case ID": "ETS-001",
        "Description": "시 이를 활성화해야 한다.\n-  Egress  Timestamp  Report는  second및  nano-second  값을  포함\n해야 한다.\n-  Egress Timestamp Report는 packet이 송신되는 EMAC포트 정보,\nHOST에서 참조를 위한 Reference정보를 포함해야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작,(T 사 작업필요)",
        "page": 29,
        "Input_table": []
      },
      {
        "Test case ID": "ITS-001",
        "Description": "정보를  제공해야  한다. Event  Packet 은  HIF 로  전달되며  전달  시\nTimestamping 정보도 함께 제공되어야 한다.  [TBD]",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. tcs-106 HW Timestamp 동작문의",
        "page": 30,
        "Input_table": []
      },
      {
        "Test case ID": "PTP-001",
        "Description": "-  Timestamping  정보에는  packet을  수신한  EMAC  포트,  PUNT\nReason등이 포함되어야 한다.\nTPA 는 P2P-Transparent Clock 을 제공해야 하며, gPTP 패킷을 식별하고\n처리해야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. tcs-106 HW Timestamp 미동작,(T 사 작업필요), gPTP-TC 패킷\nHandling (다산 작업 중)",
        "page": 31,
        "Input_table": []
      },
      {
        "Test case ID": "PTP-002",
        "Description": "Timestamping 처리 없이 Host 로 전달해야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. tcs-106 HW Timestamp 미동작,(T 사 작업필요), gPTP-TC 패킷\nHandling (다산 작업 중)",
        "page": 32,
        "Input_table": []
      },
      {
        "Test case ID": "PTP-003",
        "Description": "Timestamping 처리 없이 Host 로 전달해야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. tcs-106 HW Timestamp 미동작,(T 사 작업필요), gPTP-TC 패킷\nHandling (다산 작업 중)",
        "page": 33,
        "Input_table": []
      },
      {
        "Test case ID": "PTP-004",
        "Description": "전달해야 한다.\n- TPA 는 혼잡 상황에서 Event Packet 을 우선 수신 처리할 수 있어야\n한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. tcs-106 HW Timestamp 미동작,(T 사 작업필요), gPTP-TC 패킷\nHandling (다산 작업 중)",
        "page": 34,
        "Input_table": []
      },
      {
        "Test case ID": "PTP-005",
        "Description": "취득하여 링크 지연시간(pDelay) 및 Buffer 지연시간 (Residential Time)을\n계산할 수 있어야 한다.\n- TPA Host 는 Master 에서 Slave 로 전송하는 General Packet 중 Follow-\nUp Packet 의 Correction Field 값을 업데이트 해야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. tcs-106 HW Timestamp 미동작,(T 사 작업필요), gPTP-TC 패킷\nHandling (다산 작업 중)",
        "page": 35,
        "Input_table": []
      },
      {
        "Test case ID": "PTP-006",
        "Description": "한다. TPA 는 EMAC 포트에서 현재 측정한 peer-to-peer link delay 값을\n제공해야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. tcs-106 HW Timestamp 미동작,(T 사 작업필요), gPTP-TC 패킷\nHandling (다산 작업 중)",
        "page": 36,
        "Input_table": []
      },
      {
        "Test case ID": "JFR-001",
        "Description": "목적지 포트로 오류 없이 포워딩 할 수 있어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1. Tester_1 에 packet length 가 4000byte 인 패킷을 생성한다. \n2. Tester_1,2 -> emac1,2 로 트래픽을 1 분간 인가한다.\n1.\nPort  SMAC  DMAC  SIP  DIP  Length",
        "Input": "T1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2  4000\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  4000",
        "Expected Result": "2. Tester_1,2 로 올바르게 forwarding 된다.\n2. Tester_1,2 로 올바르게 forwarding 된다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 37,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "JFR-002",
        "Description": "Jumbo frame 를 수신하여 이를 목적지 포트로 오류 없이 포워딩 할 수\n있어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. Tester_1 에 packet length 가 4000byte 인 패킷을 생성한다.",
        "Sequence": "2. Tester_1,2 -> emac1,2 로 트래픽을 1 분간 인가한다.\n1.\nPort  SMAC  DMAC  SIP  DIP  Length  Vid",
        "Input": "T1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2  4000  10\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  4000  10",
        "Expected Result": "2. Tester_2 로 올바르게 forwarding 된다.\n2. Tester_1,2 로 올바르게 forwarding 된다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 38,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "BLS-001",
        "Description": "- Forward: MAC Learning 및 Frame Forwarding 가능.\n- Blocked: MAC Learning 및 Frame Forwarding 불가.\n- Learn-Only: MAC Learning 만 가능.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. block state = 0 으로 설정한다.\n2. Tester_1 -> emac1 로 traffic 을 송신한다.\n3. 장비를 재부팅한다.\n4. block state = 1 으로 설정한다.",
        "Sequence": "5. Tester_1 -> emac1 로 traffic 을 송신한다.\n6. 장비를 재부팅한다.\n7. block state = 2 으로 설정한다.\n8. Tester_1 -> emac1 로 traffic 을 송신한다.\n1.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=33024 --aft=0 -\n-fbi=1 --bs=0 --cub=0\ntc-tpa bd_port info --portNo=1\n2.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  1",
        "Input": "4.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=33024 --aft=0 -\n-fbi=1 --bs=1 --cub=0\ntc-tpa bd_port info --portNo=1\n5.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  1",
        "page": 39,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "BLS-002",
        "Description": "매칭 프레임을 포워딩 하지 않아야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.block state = 1 으로 설정한다.",
        "Sequence": "2.Tester_1 -> emac1 로 traffic 을 송신한다.\n1. block state = 1 으로 설정한다.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=33024 --aft=0 -\n-fbi=1 --bs=1 --cub=0\ntc-tpa bd_port info --portNo=1",
        "Input": "2. Tester_1 -> emac1 로 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  1",
        "Expected Result": "2. mac learning 및 forwarding 이 동작하지 않는다.\n2. mac learning 및 forwarding 이 동작하지 않는다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 42,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "BLS-003",
        "Description": "프레임을 포워딩 하지 않아야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "FAIL",
        "Test result": "-. hif block state 설정불가(다산 작업 중)",
        "page": 43,
        "Input_table": []
      },
      {
        "Test case ID": "BLS-004",
        "Description": "- \"MAC + VLAN\" 매칭 실패 프레임 수신 시 MAC Learning 을 해야\n한다. (MAC 테이블에 Learning 된 MAC 주소 등록)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. block state = 2 으로 설정한다.",
        "Sequence": "2. Tester_1 -> emac1 로 traffic 을 송신한다.\n1. block state = 2 으로 설정한다.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=33024 --aft=0 -\n-fbi=1 --bs=2 --cub=0\ntc-tpa bd_port info --portNo=1",
        "Input": "2. Tester_1 -> emac1 로 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  1",
        "Expected Result": "2.mac learning 만 동작하고 forwarding 은 동작하지 않는다.",
        "Test output": "FAIL",
        "Test result": "-. Dynamic mac learning 불가(Linux Master OK. T 사 작업 필요)",
        "page": 44,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "BLS-005",
        "Description": "- \"MAC + VLAN\" 매칭 실패 프레임 수신 시 MAC Learning 을 해야\n한다. (MAC 테이블에 Learning 된 MAC 주소 등록)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. block state = 2 으로 설정한다.",
        "Sequence": "2. Tester_1 -> hif 로 traffic 을 송신한다.\n1. block state = 2 으로 설정한다.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=33024 --aft=0 -\n-fbi=1 --bs=2 --cub=0\ntc-tpa bd_port info --portNo=1",
        "Input": "2. Tester_1 -> emac1 로 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  1",
        "Expected Result": "2.mac learning 만 동작하고 forwarding 은 동작하지 않는다.",
        "Test output": "FAIL",
        "Test result": "-. hif block state 설정불가(다산 작업 중)",
        "page": 45,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "BLS-006",
        "Description": "- \"MAC + VLAN\" 매칭 실패 프레임 수신 시 MAC Learning 을 해야\n한다. (MAC 테이블에 Learning 된 MAC 주소 등록)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. block state = 0 으로 설정한다.",
        "Sequence": "2. Tester_1 -> emac1 로 traffic 을 송신한다.\n1. block state = 0 으로 설정한다.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=33024 --aft=0 -\n-fbi=1 --bs=0 --cub=0\ntc-tpa bd_port info --portNo=1",
        "Input": "2. Tester_1 -> emac1 로 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  1",
        "Expected Result": "2. mac learning 및 forwarding 이 올바르게 동작한다.\n2. mac learning 및 forwarding 이 올바르게 동작한다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 46,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "BLS-007",
        "Description": "- \"MAC + VLAN\" 매칭 실패 프레임 수신 시 MAC Learning 을 해야\n한다. (MAC 테이블에 Learning 된 MAC 주소 등록)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "FAIL",
        "Test result": "-. hif block state 설정불가(다산 작업 중)",
        "page": 47,
        "Input_table": []
      },
      {
        "Test case ID": "L2GEN-001",
        "Description": "MAC Table, VLAN Table, CB Stream Table, ACL Table 등을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. mac table 을 확인하는 명령어를 입력한다.\n2. vlan table 을 확인하는 명령어를 입력한다.",
        "Sequence": "3. cb stream table 을 확인하는 입력한다.\n4. acl table 을 확인하는 명령어를 입력한다.\n1. mac table 을 확인하는 명령어를 입력한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --vlan=10 --mac=00:11:22:33:44:55 --polist=0x7 --\nhact=0 --tc=0 --hifch=0\ntc-tpa show_bridge entries\n2. vlan table 을 확인하는 명령어를 입력한다.\ntc-tpa bd add --vlan=10 --fpl=0x1 --utl=0x1 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\ntc-tpa show_vlan entries",
        "Input": "3. cb stream table 을 확인하는 입력한다.\ntc-tpa cb add --mac=00:01:02:03:04:05 --vlan=1 --id_type=1 --fpl=0x5 --\nevr=0 --err=0 --er=0 --esg=1 --emv=1 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=50 --pcp=6 --rat=0 --shl=0 --srrm=0 --ssn=0\ntc-tpa cb show --mac=00:01:02:03:04:05 --vlan=1 --id_type=1\n4. acl table 을 확인하는 명령어를 입력한다.\ntc-tpa acl add --id=0 --iport=2 --vlan=1 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -",
        "page": 48,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "L2GEN-002",
        "Description": "- Hash 기반 Lookup: MAC Table, VLAN Table, CB Stream Table\n- Sequential Lookup: ACL Table",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.static mac 을 등록한다.\n2.mac table 을 출력한다.\n3.vlan 을 추가한다.",
        "Sequence": "4.vlan table 을 출력한다.\n5.cb table 을 추가한다.\n6.cb table 을 출력한다.\n7. acl table 을 출력한다.\n1. static mac 을 등록한다.\ntc-tpa bd_mac add --mac=00:00:00:00:11:11 --polist=0x1 --vlan=1 --\nhact=0 --tc=0 --hifch=0\n2. mac table 을 출력한다.\ntc-tpa show_bridge entries\n3. vlan 을 추가한다.\ntc-tpa bd add --vlan=20 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0",
        "Input": "4. vlan table 을 출력한다.\ntc-tpa show_vlan entries\n5. cb table 을 추가한다.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=10 --id_type=0 --fpl=0x3\n--evr=0 --err=0 --er=0 --esg=1 --emv=1 --evi=1 --reb=0 --vrpl=0x0 --\nrrpl=0x0 --pdl=0 --mv=20 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n6. cb table 을 출력한다.\ntc-tpa cb show –all",
        "page": 51,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "L2GEN-003",
        "Description": "- ACL Lookup -> CB Stream Lookup -> MAC/VLAN Lookup",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. acl rule 을 설정한다.\n2. cb rule 을 설정한다.\n3. mac 을 static 하게 설정한다.\n4. Tester_2 에서 emac1 로 traffic 을 인가한다.",
        "Sequence": "5. acl rule 을 삭제한다.\n6. Tester_2 에서 emac1 로 traffic 을 인가한다.\n7. cb rule 을 삭제한다.\n8. Tester_2 에서 emac1 로 traffic 을 인가한다.\n1. acl rule 을 설정한다.\ntc-tpa acl add --id=0 --iport=2 --vlan=1 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n2. cb rule 을 설정한다.",
        "Input": "tc-tpa cb add --mac=00:00:00:00:11:11 --vlan=1 --id_type=0 --fpl=0x1 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=20 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n3. mac 을 static 하게 설정한다.\ntc-tpa bd_mac add --vlan=1 --mac=00:00:00:00:11:11 --polist=0x8 --\nhact=0 --tc=0 --hifch=0\n4. acl rule 을 먼저 lookup 한다.",
        "Expected Result": "6. cb rule 을 먼저 lookup 한다.\n8. mac/vlan 을 lookup 한다.",
        "page": 54,
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "L2GEN-004",
        "Description": "Remove, Search 기능을 제공해야 하며, 각 Table 에 대한 조회 기능을\n제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. mac table 1 개를 add 한다.",
        "Sequence": "2. mac table 1 개를 remove 한다.\n3. mac table 을 조회한다.\n1. mac table 1 개를 add 한다.\ntc-tpa bd_mac add --vlan=1 --mac=00:11:22:33:44:55 --polist=0x7 --\nhact=0 --tc=0 --hifch=0",
        "Input": "2. mac table 1 개를 remove 한다.\ntc-tpa bd_mac del --vlan=1 --mac=00:11:22:33:44:55\n3. mac table 을 조회한다.\ntc-tpa show_bridge entries\n1. mac table 이 올바르게 add 된다.",
        "Expected Result": "2. mac table 이 올바르게 remove 된다.\n3. mac table 이 올바르게 search 된다.\n1.mac table 1 개가 올바르게 add 된다.\n2. mac table 이 올바르게 remove 된다.",
        "Test output": "3. mac table 이 올바르게 search 된다.",
        "page": 56,
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "L2GEN-005",
        "Description": "IPv4 패킷 길이가 64 byte 이하인 패킷을 허용하는지 확인한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1.패킷 length 가 50byte 인 arp 패킷을 송신한다.\n1.잘못된 hardward type(5)을 가진 arp 패킷을 송신한다.",
        "Input": "",
        "Expected Result": "1.TPA 는 padding 처리하여 64byte 패킷을 송신한다.\n1.TPA 는 padding 처리하여 64byte 패킷을 송신한다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 58,
        "Input_table": []
      },
      {
        "Test case ID": "L2GEN-006",
        "Description": "잘못된 Hardware type 패킷을 차단하는지 확인한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1.잘못된 hardward type(5)을 가진 arp 패킷을 송신한다.\n1.잘못된 hardward type(5)을 가진 arp 패킷을 송신한다.",
        "Input": "",
        "Expected Result": "1.TPA 는 arp reply 를 송신하지 않는다.\n1. TPA 는 arp reply 를 송신하지 않는다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 59,
        "Input_table": []
      },
      {
        "Test case ID": "L2GEN-007",
        "Description": "잘못된 Protocol type 패킷을 차단하는지 확인한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1.잘못된 protocol type(0x1111)을 가진 arp 패킷을 송신한다.\n1.잘못된 protocol type(0x1111)을 가진 arp 패킷을 송신한다.",
        "Input": "",
        "Expected Result": "1.TPA 는 arp reply 를 송신하지 않는다.\n1. TPA 는 arp reply 를 송신하지 않는다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 60,
        "Input_table": []
      },
      {
        "Test case ID": "L2GEN-008",
        "Description": "잘못된 Hardware address length 패킷을 차단하는지 확인한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1.잘못된 hardward address length(5)을 가진 arp 패킷을 송신한다.\n1.잘못된 hardward address length (5)을 가진 arp 패킷을 송신한다.",
        "Input": "",
        "Expected Result": "1.TPA 는 arp reply 를 송신하지 않는다.\n1. TPA 는 arp reply 를 송신하지 않는다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 61,
        "Input_table": []
      },
      {
        "Test case ID": "L2GEN-009",
        "Description": "잘못된 protocol address length 패킷을 차단하는지 확인한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1.잘못된 protocol address length(2)을 가진 arp 패킷을 송신한다.\n1. 잘못된 protocol address length(2)을 가진 arp 패킷을 송신한다.",
        "Input": "",
        "Expected Result": "1.TPA 는 arp reply 를 송신하지 않는다.\n1. TPA 는 arp reply 를 송신하지 않는다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 62,
        "Input_table": []
      },
      {
        "Test case ID": "MAC-001",
        "Description": "- Collision 없이 유지할 수 있는 최대 엔트리 개수: 1024\n- Collision 이 있는 경우 유지할 수 있는 최대 엔트리 개수: 2048\n- Worst-Case 인 경우 1 Hash + 1024 Collision 이다.",
        "Test Environment": "",
        "Test Method": "REVIEW",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "제약사항: 각 case 별 시험 불가",
        "Test result": "검토결과: 서비스 제약 없음, logic 검토로 대체",
        "page": 63,
        "Input_table": []
      },
      {
        "Test case ID": "MAC-002",
        "Description": "주소에 대한 멤버쉽을 설정해야 한다. 멤버쉽은 IGMP Snooping 을\n사용하여 동적으로 관리하거나 TPA 에 직접 설정을 통한 정적 관리를\n제공해야 한다. Multicast 프레임 수신시 해당 그룹 주소에 등록된 멤버\n포트로만 포워딩해야 한다. (그룹 멤버쉽은 Forward List 로 관리)\n- Unicast 프레임: Forward List 에 등록된 Physical Port 로 프레임을\n포워딩 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. Tester_1 에 broadcast traffic 을 생성한다.\n2. Tester traffic 을 인가한다.\n3. Tester_1,2 에 unicast traffic 을 생성한다.",
        "Sequence": "4. Tester traffic 을 인가한다.\n5. emac2,3 에 emac1 의 multicast mac 을 static 으로 등록한다.\n6. Tester traffic 을 인가한다.\n1. Tester_1 에 broadcast traffic 을 생성한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  ff:ff:ff:ff:ff:ff  100.1.1.1  255.255.255.255\n3. Tester_1,2 에 unicast traffic 을 생성한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1",
        "Input": "T2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1\n5. emac2,3 에 emac1 의 multicast mac 을 static 으로 등록한다.\ntc-tpa bd_mac add --mac=01:00:5e:01:01:01 --polist=0xa --vlan=1 --\nhact=0 --tc=0 --hifch=0\n6. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP",
        "page": 64,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "ff:ff:ff:ff:ff:ff",
            "SIP": "100.1.1.1",
            "DIP": "255.255.255.255"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MAC-003",
        "Description": "- Punt: 프레임에 대한 분석 또는 추가 작업 처리 등의 목적으로 호스트로\n포워딩.\n- Discard: Matching 된 프레임을 폐기.\n- Forward_mask: 패킷을 수신한 포트가 VLAN Bridge 의 Forward List 에\n포함되지 않은 경우 프레임을 폐기.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. mac table action 을 forward 로 설정한다.\n2. Tester 의 traffic 을 인가한다.\n3. mac table action 을 punt 로 설정한다.\n4. Tester 의 traffic 을 인가한다.",
        "Sequence": "5. mac table action 을 discard 로 설정한다.\n6. Tester 의 traffic 을 인가한다\n7. mac table action 을 forward mask 로 설정한다\n8. Tester 의 traffic 을 인가한다.\n1. mac table action 을 forward 로 설정한다.\ntc-tpa bd_mac add --mac=00:00:00:00:22:22 --polist=0x02 --vlan=1 --\nhact=0 --tc=0 --hifch=0\n2. Tester 의 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  1",
        "Input": "3. mac table action 을 punt 로 설정한다.\ntc-tpa bd_mac add --mac=00:00:00:00:22:22 --polist=0x02 --vlan=1 --\nhact=2 --tc=0 --hifch=0\n4. Tester 의 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID",
        "page": 66,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MAC-004",
        "Description": "하며, 등록가능한 최대 엔트리 범위 내에서 등록된 엔트리 개수와\n무관하게 동일한 액세스 성능을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. mac table 1 개를 add 한다.\n2. mac table 1 개를 remove 한다.\n3. mac table 을 조회한다.",
        "Sequence": "4. mac table 1024 개를 add 한다.\n5. mac table 을 조회한다.",
        "page": 68,
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "MAC-005",
        "Description": "하며, 등록된 엔트리의 개수가 증가할수록 액세스 성능이 낮아질 수\n있다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.collision 영역에 mac 을 등록한다.",
        "Sequence": "2.등록된 mac 을 이용하여 traffic 을 인가한다.\n1. collision 영역에 mac 을 등록한다.\ntc-tpa bd_mac add --mac=00:00:00:00:00:01 --polist=0x01 --vlan=1 --\nhact=0 --tc=0 --hifch=0\ntc-tpa bd_mac add --mac=00:00:00:00:01:00 --polist=0x02 --vlan=1 --",
        "Input": "hact=0 --tc=0 --hifch=0\n2. 등록된 mac 을 이용하여 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:00:01  00:00:00:00:01:00  100.1.1.1  200.1.1.1  1\n1.collision 영역에 mac 이 올바르게 등록된다.",
        "Expected Result": "2.traffic 이 올바르게 forwarding 된다.\n1.collision 영역에 mac 이 올바르게 등록된다.",
        "Test output": "2. traffic 이 올바르게 forwarding 된다.",
        "Test result": "PASS",
        "page": 70,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:00:01",
            "DMAC": "00:00:00:00:01:00",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MAC-006",
        "Description": "",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.vlan 10 에 00:00:00:00:11:11 mac 을 등록한다\n2.vlan 20 에 00:00:00:00:22:22 mac 을 등록한다.\n3. bridge 을 조회한다.",
        "Sequence": "4. mac Table 에 등록되지 않는 소스 mac 주소를 가진 프레임을\nTester 으로 송신한다.\n5. bridge 을 조회한다.\n1. vlan 10 에 00:00:00:00:11:11 mac 을 등록한다\ntc-tpa bd add --vlan=10 --fpl=0x1 --utl=0x1 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --vlan=10 --mac=00:00:00:00:11:11 --polist=0x7 --",
        "Input": "hact=0 --tc=0 --hifch=0\n2. vlan 20 에 00:00:00:00:22:22 mac 을 등록한다.\ntc-tpa bd add --vlan=20 --fpl=0x1 --utl=0x1 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0",
        "page": 71,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "MAC-007",
        "Description": "(현재, Dynamic 의 동작은 Hardware 문제로 인해 정상 동작하지 않으며,\nDynamic 동작을 Hardware + Software 조합 동작에서 Hardware Only\n동작 방식으로 변경할 예정임)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. mac table 에 등록되지 않는 소스 mac 주소를 가진 프레임을\nTester 로 송신한다.",
        "Sequence": "2. bridge 을 조회한다.\n3. mac aging time 까지 대기한다.\n4. mac table 을 조회한다.\n1. mac table 에 등록되지 않는 소스 mac 주소를 가진 프레임을\nTester 로 송신한다.\nPort  SMAC  DMAC  SIP  DIP",
        "Input": "T1  00:00:00:00:33:33  00:00:00:00:22:22  100.1.1.1  200.1.1.1\n2. bridge 을 조회한다.\ntc-tpa show_bridge entries\n2. Tester 에서 인가한 traffic 의 source mac 이 mac table 에 올바르게",
        "Expected Result": "등록된다.\n4. aging time 이 지난 후 등록된 mac 이 삭제된다.",
        "Test output": "FAIL",
        "Test result": "-. Dynamic mac learning 불가(Linux Master OK. T 사 작업 필요)",
        "page": 73,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MAC-008",
        "Description": "Table 엔트리를 등록할 수 있어야 한다. 엔트리는 Aging 에 무관하게\n지속적으로 유지되어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. static mac 을 mac table 에 입력한다.\n2. mac table 을 조회한다.",
        "Sequence": "3. mac aging time 까지 대기한다.\n4. mac table 을 조회한다.\n1. static mac 을 mac table 에 입력한다.\ntc-tpa bd_mac add --vlan=1 --mac=00:00:00:00:11:11 --polist=0x7 --\nhact=0 --tc=0 --hifch=0",
        "Input": "2. mac table 을 조회한다.\ntc-tpa show_bridge entries\n4. mac table 을 조회한다.\ntc-tpa show_bridge entries\n2. static 으로 등록한 mac 이 올바르게 등록된다.",
        "Expected Result": "4. static 으로 등록한 mac 이 aging time 과 무관하게 유지된다.\n1. static 으로 등록한 mac 이 올바르게 등록된다.",
        "Test output": "4. static 으로 등록한 mac 이 aging time 과 무관하게 유지된다.",
        "Test result": "PASS",
        "page": 74,
        "Input_table": []
      },
      {
        "Test case ID": "MAC-009",
        "Description": "Aging 기능을 제공해야 한다. Aging 대상으로 선정된 MAC\nTable 엔트리는 삭제되어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. mac table 에 등록되지 않는 소스 mac 주소를 가진 프레임을\nTester 으로 송신한다.",
        "Sequence": "2. bridge 을 조회한다.\n3. mac aging time 까지 대기한다.\n4. mac table 을 조회한다.\n1. mac table 에 등록되지 않는 소스 mac 주소를 가진 프레임을\nTester 으로 송신한다.\nPort  SMAC  DMAC  SIP  DIP",
        "Input": "T1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\n2. bridge 을 조회한다.\ntc-tpa show_bridge entries\n1. mac table 에 등록되지 않는 소스 mac 주소를 가진 프레임이",
        "Expected Result": "bridge 에 등록된다.\n4. aging time 이 지난 후 등록된 mac 이 삭제된다.",
        "Test output": "FAIL",
        "Test result": "-. Dynamic mac learning 불가(Linux Master OK. T 사 작업 필요)",
        "page": 75,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MAC-010",
        "Description": "시간 동안 MAC Table 의 엔트리 Hit 가 되지 않는 경우, 해당 엔트리는\n삭제되어야 한다. ‘T_aging’의 디폴트 값은 300 초이다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. mac table 을 clear 한다.\n2. Tester_1 에 traffic 을 생성한다.\n3. Tester_1 의 traffic 을 인가한다.",
        "Sequence": "4. Tester_1 의 traffic 을 멈춘다.\n5. mac table 을 조회한다.\n6. mac aging time 까지 대기한다.\n7. mac table 을 조회한다.\n2. Tester_1 에 traffic 을 생성한다.",
        "Input": "Port  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\n1. mac table 이 올바르게 clear 된다.\n5. Tester 에서 인가한 traffic 의 source mac 이 mac table 에 올바르지",
        "Expected Result": "등록된다.\n7. aging time 이 지난 후 등록된 mac 이 삭제된다.",
        "Test output": "FAIL",
        "Test result": "-. Dynamic mac learning 불가(Linux Master OK. T 사 작업 필요)",
        "page": 76,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MAC-011",
        "Description": "TPA 는 “MAC Movement”가 필요한 경우 이를 Host 에 알리고, Host 는\n“MAC Movement”를 처리해야 한다. (현재 Hardware 문제로\n정상동작하지 않는 상황)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. Tester 의 mac = 00:00:00:00:33:33 인 traffic 을 emac1 번포트로\n인가한다.\n2. mac table 을 조회한다.",
        "Sequence": "3. Tester 의 mac = 00:00:00:00:33:33 인 traffic 을 emac 2 번포트로\n인가한다.\n4. mac table 을 조회한다.\n1. Tester 의 mac = 00:00:00:00:33:33 인 traffic 을 emac1 번포트로\n인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:33:33  00:00:00:00:22:22  100.1.1.1  200.1.1.1\n2. mac table 을 조회한다.\ntc-tpa show_bridge entries",
        "Input": "3. Tester 의 mac = 00:00:00:00:33:33 인 traffic 을 emac 2 번포트로\n인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT2  00:00:00:00:33:33  00:00:00:00:22:22  100.1.1.1  200.1.1.1\n4. mac table 을 조회한다.\ntc-tpa show_bridge entries\n2. mac = 00:00:00:00:33:33 가 emac1 번포트에 등록된다.",
        "Expected Result": "4. mac = 00:00:00:00:33:33 가 emac2 번포트에 등록된다.",
        "Test output": "NA",
        "Test result": "-. tcs-85 현재 Hardware 문제로 정상동작하지 않는 상황",
        "page": 77,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VLAN-001",
        "Description": "- Collision 이 없는 경우: 최대 256 개 (VLAN HASH Space)\n- Collision 이 있는 경우: 최대 512 개 (VLAN HASH Space + VLAN\nCollision SPACE)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.TPA 에 vlan 을 1-512 개 만큼 증가시킨다.",
        "Sequence": "2.Tester 에서 vlan 1-512 traffic 을 생성한다.\n3.Tester traffic 을 인가한다.\n1. TPA 에 vlan 을 1-512 개 만큼 증가시킨다.\ntc-tpa bd add --vlan=2 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\ntc-tpa bd add --vlan=3 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\ntc-tpa bd add --vlan=4 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0",
        "Input": "-------------------------중략--------------------------------------------\ntc-tpa bd add --vlan=512 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n2. Tester 에서 vlan 1-512 traffic 을 생성한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:33:33  00:00:00:00:44:44  100.1.1.2  100.1.1.3  2-512\nT2  00:00:00:00:44:44  00:00:00:00:33:33  100.1.1.3  100.1.1.2  2-512\n1.vlan512 개가 올바르게 등록된다.",
        "Expected Result": "3.traffic 이 올바르게 송수신된다.",
        "Test output": "FAIL",
        "Test result": "-. tcs-121 다량의 vlan add 시 mac add 안되며, mailbox log 출력됨\n(개발방향결정 후 시험예정)",
        "page": 78,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:44:44",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:44:44",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "VLAN-002",
        "Description": "처리하기 위한 Default VLAN domain 을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 VLAN tag 10 을 설정한다.",
        "Sequence": "2. untagged traffic 을 인가한다.\n1. emac1,2 에 VLAN tag 10 을 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0x0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0",
        "Input": "2. untagged traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1\n1. vlan 이 올바르게 조회된다.",
        "Expected Result": "3. Tester_1,2 에 untagged traffic 이 올바르게 수신된다.\n1. vlan 이 올바르게 조회된다.",
        "Test output": "3. Tester_1,2 에 untagged traffic 이 올바르게 수신된다.",
        "page": 79,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VLAN-003",
        "Description": "- 동작\n* EMAC1 를 통해 VLAN-19 Tag 를 가진 프레임 수신 시: L2 Table\nLookup 을 통해 결정된 VLAN-19 domain 의 Egress Port 로 프레임을\n포워딩.\n* EMAC1 를 통해 Untag 프레임 수신 시: L2 Table Lookup 을 통해\n결정된 VLAN-1 Domain 의 Egress Port 로 프레임을 포워딩.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 vlan tag 10 을 설정한다.",
        "Sequence": "2. Tester_1,2 에서 untagged traffic 을 인가한다.\n3. Tester_1,2 에서 tag 10 traffic 을 인가한다.\n1. emac1,2 에 vlan tag 10 을 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0x0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n2. Tester_1,2 에서 untagged traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP",
        "Input": "T1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1\n3. Tester_1,2 에서 tag 10 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  Vlan\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  10\n1. vlan tag 10 이 올바르게 조회된다.",
        "Expected Result": "2. Tester_1,2 에 untagged traffic 이 올바르게 수신된다.\n3. Tester_2 에 tag10 traffic 이 올바르게 수신된다.",
        "Test output": "1. vlan tag 10 이 올바르게 조회된다.",
        "page": 81,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VLAN-004",
        "Description": "모든 EMAC 및 HIF 포트에 대해 Default VLAN=2\n-  별개로 지정하는 예:\nEMAC1 의 Default VLAN=2\nEMAC2 의 Default VLAN=3\nEMAC3 의 Default VLAN=5",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.모든 포트에 default vlan1 을 설정한다.\n2.모든 포트에 default vlan2 을 설정한다.",
        "Sequence": "3.emac1 에 default vlan=1, emac2 에 default vlan=2, emac3 에 default\nvlan=3 을 설정한다.\n1. 모든 포트에 default vlan1 을 설정한다.\ntc-tpa bd_port info --portNo=1\ntc-tpa bd_port info --portNo=2\ntc-tpa bd_port info --portNo=3\n2. 모든 포트에 default vlan2 을 설정한다.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=2 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 --\npcp2tct=0 --tc2cost=0",
        "Input": "tc-tpa bd_port config --portNo=2 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=2 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 --\npcp2tct=0 --tc2cost=0\ntc-tpa bd_port config --portNo=3 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=2 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 --\npcp2tct=0 --tc2cost=0\n3.emac1 에 default vlan=1, emac2 에 default vlan=2, emac3 에 default\nvlan=3 을 설정한다.",
        "page": 84,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "VLAN-005",
        "Description": "TPA 는 Default VLAN 을 제외한 나머지에 대해 Tagged VLAN 을 생성할\n수 있다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. vlan 1 의 action 을 discard 로 설정한다.",
        "Sequence": "2. Tester traffic 을 인가한다.\n1. vlan 1 의 action 을 discard 로 설정한다.\ntc-tpa bd add --vlan=1 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=3 --\num=0 --msta=0",
        "Input": "2. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1",
        "Expected Result": "2. vlan 1 traffic 이 drop 된다.",
        "Test output": "FAIL",
        "Test result": "-. Action 설정안됨(Linux Master OK. T 사 작업 필요)",
        "page": 88,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VTAG-001",
        "Description": "나머지 4090 개의 범위 내에서 Tag VLAN 도메인 생성을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.TPA 에 vlan 을 1-512 개 만큼 증가시킨다.",
        "Sequence": "2.Tester 에서 vlan 1-512 traffic 을 생성한다.\n3.Tester traffic 을 인가한다.\n1. TPA 에 vlan 을 1-512 개 만큼 증가시킨다.\ntc-tpa bd add --vlan=2 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\ntc-tpa bd add --vlan=3 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\ntc-tpa bd add --vlan=4 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0",
        "Input": "---------------------------------------중략------------------------------------\ntc-tpa bd add --vlan=512 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n2. Tester 에서 vlan 1-512 traffic 을 생성한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:33:33  00:00:00:00:44:44  100.1.1.2  100.1.1.3  1-512\nT2  00:00:00:00:44:44  00:00:00:00:33:33  100.1.1.3  100.1.1.2  1-512\n1.vlan512 개가 올바르게 등록된다.",
        "Expected Result": "3.traffic 이 올바르게 송수신된다.",
        "Test output": "FAIL",
        "Test result": "-. tcs-121 다량의 vlan add 시 mac add 안되며, mailbox log 출력됨\n(개발방향결정 후 시험예정)",
        "page": 89,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:44:44",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:44:44",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "VTAG-002",
        "Description": "Member Port 로 할당할 수 있으며 Forwarding Port Map (Forwarding\nMask)으로 설정 및 조회가 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. vlan 10 을 생성한다.\n2. emac 및 HIF 에 vlan10 을 tag member 로 설정한다.",
        "Sequence": "3. vlan 을 조회한다.\n4. Tester 에서 emac 및 HIF 로 traffic 을 인가한다.\n1. vlan 10 을 생성한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0x0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n3. vlan 을 조회한다.\ntc-tpa show_bridge entries",
        "Input": "4. Tester 에서 emac 및 HIF 로 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  10\nT2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1  10\n3. emac 및 HIF 에 설정한 vlan 정보가 올바르게 출력된다.",
        "Expected Result": "4. vlan10 traffic 이 emac 및 HIF 로 올바르게 전달된다.\n3. emac 및 HIF 에 설정한 vlan 정보가 올바르게 출력된다.",
        "Test output": "4.vlan10 traffic 이 emac 및 HIF 로 올바르게 전달된다.",
        "page": 90,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VTAG-003",
        "Description": "Member Port 로 할당할 수 있으며 Forwarding Port Map (Forwarding\nMask)으로 설정 및 조회가 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.emac1,2 을 vlan10 access port 로 설정한다.",
        "Sequence": "2. Tester 에서 emac1,2 로 traffic 을 인가한다.\n1.emac1,2 을 vlan10 access port 로 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=10 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 -\n-pcp2tct=0 --tc2cost=0\ntc-tpa bd_port config --portNo=2 --shutdown=0 --tpid=0x8100 --aft=0",
        "Input": "--fbi=10 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 -\n-pcp2tct=0 --tc2cost=0\n2.Tester 에서 emac1,2 로 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1",
        "Expected Result": "1. untag traffic 올바르게 forwarding 된다.\n1. untag traffic 올바르게 forwarding 된다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 92,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VTAG-004",
        "Description": "멤버로 포워딩이 가능해야 하며 포워딩 시 수신한 VLAN 정보(PCP, DEI,\nVLAN-ID)는 그대로 유지되어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 vlan 10 을 설정한다.",
        "Sequence": "2. Tester_1,2 에 vlan10 / pcp7 인 traffic 을 송신한다.\n1. emac1,2 에 vlan 10 을 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0",
        "Input": "2. Tester_1,2 에 vlan10 / pcp7 인 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  10\nT2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1  10",
        "Expected Result": "3. vlan 정보를 포함한 traffic 이 올바르게 송수신된다.\n3. vlan 정보를 포함한 traffic 이 올바르게 송수신된다.",
        "Test output": "",
        "page": 93,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VTAG-005",
        "Description": "멤버로 포워딩이 가능해야 하며 포워딩 시 수신한 VLAN 은 삭제되어야\n한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.emac1,2 을 vlan10 access port 로 설정한다.",
        "Sequence": "2. Tester 에서 emac1,2 로 traffic 을 인가한다.\n1.emac1,2 을 vlan10 access port 로 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=10 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 -\n-pcp2tct=0 --tc2cost=0\ntc-tpa bd_port config --portNo=2 --shutdown=0 --tpid=0x8100 --aft=0",
        "Input": "--fbi=10 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 -\n-pcp2tct=0 --tc2cost=0\n2.Tester 에서 emac1,2 로 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1",
        "Expected Result": "1. untag traffic 올바르게 forwarding 된다.\n1. untag traffic 올바르게 forwarding 된다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 95,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VTAG-006",
        "Description": "다른 VLAN-M 의 Member Port 로 동시 할당이 가능한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 vlan 10 을 설정한다.\n2. emac1,2 vlan 20 을 설정한다.",
        "Sequence": "3. Tester_1,2 에 vlan 10,20 인 traffic 을 생성한다.\n4. Tester traffic 을 인가한다.\n1. emac1,2 에 vlan 10 을 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0x0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n2. emac1,2 vlan 20 을 설정한다.\ntc-tpa bd add --vlan=20 --fpl=0x1f --utl=0x0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0",
        "Input": "3. Tester_1,2 에 vlan 10,20 인 traffic 을 생성한다.\nPort  SMAC  DMAC  SIP  DIP  VID\n00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  10\nT1\n00:00:00:00:33:33  00:00:00:00:44:44  100.1.1.2  100.1.1.3  20\n00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1  10\nT2\n00:00:00:00:44:44  00:00:00:00:33:33  100.1.1.3  100.1.1.2  20",
        "Expected Result": "4. vlan tag 10,20 인 traffic 올바르게 송수신된다.\n4. vlan tag 10,20 인 traffic 올바르게 송수신된다.",
        "Test output": "",
        "page": 96,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:44:44",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "",
            "SMAC": "00:00:00:00:44:44",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "PVLAN-001",
        "Description": "- VLAN-19 의 Tag Member = {EMAC1, EMAC2}\n- EMAC1 의 Default VLAN = VLAN-19\nTPA 는 EMAC 포트에서 Untagged Frame 수신 시 Default VLAN ID 값을\n참조하여 IEEE802.1Q VLAN Tag 를 추가한 후 포워딩 해야 한다.\n서로 다른 두 VLAN Tag 간의 L2 Bridge Switching 은 제공하지 않는다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 vlan tag 10 을 설정한다.\n2. emac1 의 default vlan 을 10 으로 설정한다.",
        "Sequence": "3. Tester_1 에서 emac1 로 untagged traffic 을 생성한다.\n4. Tester traffic 을 인가한다.\n1. emac1,2 에 vlan tag 10 을 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n2. emac1 의 default vlan 을 10 으로 설정한다.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=0x8100 --aft=0",
        "Input": "--fbi=10 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 -\n-pcp2tct=0 --tc2cost=0\n3. Tester_1 에서 emac1 로 untagged traffic 을 생성한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1",
        "Expected Result": "3. emac2 에서 tag 10 traffic 이 올바르게 송신된다.",
        "Test output": "3. emac2 에서 tag 10 traffic 이 올바르게 송신된다.",
        "page": 98,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "PVLAN-002",
        "Description": "TPA 는 VLAN Bridge Domain 으로 수신한 프레임에 Unicast/Multicast Hit\n및 Miss 시 처리를 위한 Action 을 제공한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.모든 포트에 default vlan1 을 설정한다.\n2.모든 포트에 default vlan2 을 설정한다.",
        "Sequence": "3.emac1 에 default vlan=1, emac2 에 default vlan=2, emac3 에 default\nvlan=3 을 설정한다.\n1. 모든 포트에 default vlan1 을 설정한다.\ntc-tpa bd_port info --portNo=1\ntc-tpa bd_port info --portNo=2\ntc-tpa bd_port info --portNo=3\n2. 모든 포트에 default vlan2 을 설정한다.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=2 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 --\npcp2tct=0 --tc2cost=0\ntc-tpa bd_port config --portNo=2 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=2 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 --\npcp2tct=0 --tc2cost=0",
        "Input": "tc-tpa bd_port config --portNo=3 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=2 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 --\npcp2tct=0 --tc2cost=0\n3.emac1 에 default vlan=1, emac2 에 default vlan=2, emac3 에 default\nvlan=3 을 설정한다.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=1 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 --\npcp2tct=0 --tc2cost=0\ntc-tpa bd_port config --portNo=2 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=2 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 --\npcp2tct=0 --tc2cost=0",
        "page": 100,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "VACT-001",
        "Description": "멤버 포트로 프레임을 Flooding.\n- Punt: HIF 채널이 VLAN Bridge Domain 의 멤버로 등록된 경우\nHIF 채널로 Forwarding.\n- Discard: 해당 패킷을 Discard.\n- Forward Mask: 프레임을 수신한 포트가 \"Forwarding Port Map\"에\n지정되지 않는 경우 Drop\n- 해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.bd_mac add 를 모든 포트로 설정한다.\n2. mac table action 을 forward 로 설정한다.\n3. Tester 의 traffic 을 인가한다.\n4. mac table action 을 punt 로 설정한다.\n5. Tester 의 Traffic 을 인가한다.\n6. mac table action 을 discard 로 설정한다.",
        "Sequence": "7. Tester 의 traffic 을 인가한다\n8. mac table action 을 forward mask 로 설정한다.\n9. Tester 의 traffic 을 인가한다.\n10. mac table action 을 cos discard 로 설정한다\n11. Tester 의 traffic 을 인가한다.\n12. mac table action 을 flood 로 설정한다\n13. Tester 의 traffic 을 인가한다.\n1.\ntc-tpa bd_mac add --mac=00:00:00:00:22:22 --polist=0x1f --vlan=1 --",
        "Input": "hact=0 --tc=0 --hifch=0\n2.",
        "page": 104,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "VACT-002",
        "Description": "- 지정 디폴트 = Forward: Matching 된 테이블의 forward port 로\n프레임을 포워딩.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. TPA vlan action 이 forward 인지 확인한다.",
        "Sequence": "2. Tester_1,2 에 traffic 을 인가한다.\n1. TPA vlan action 이 forward 인지 확인한다.\ntc-tpa show_bridge entries\n2. Tester_1,2 에 traffic 을 인가한다.",
        "Input": "Port  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1\n1.action 이 정상적으로 출력된다.",
        "Expected Result": "3. traffic 이 올바르게 송수신된다.\n1.action 이 정상적으로 출력된다.",
        "Test output": "3. traffic 이 올바르게 송수신된다.",
        "page": 107,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VACT-003",
        "Description": "- 지정 디폴트 = Flood: 매치 실패 시 VLAN Bridge Domain 에 등록된\n전체 포트로 Flooding. Dynamic MAC Learning 을 위해 사용.\n- Discard: 매치 실패 시 해당 프레임을 Discard.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. TPA mac table 을 clear 한다.\n2. TPA vlan action 을 flood 로 설정한다.\n3. Tester_1 -> emac1 을 인가한다.",
        "Sequence": "4. TPA mac table 을 clear 한다.\n5. TPA vlan actiion 을 discard 로 설정한다.\n6. Tester_1 -> emac1 을 인가한다.\n2. TPA vlan action 을 flood 로 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\n3. Tester_1 -> emac1 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  10",
        "Input": "5. TPA vlan actiion 을 discard 로 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=3 --msta=0\n6. Tester_1 -> emac1 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  10\n3. emac1 으로 수신된 traffic 이 flooding 되는지 확인한다.",
        "Expected Result": "6. emac1 으로 수신된 traffic 이 discard 되는지 확인한다.",
        "Test output": "FAIL",
        "Test result": "-. Dynamic mac learning 불가(Linux Master OK. T 사 작업 필요)",
        "page": 109,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VACT-004",
        "Description": "- 지정 디폴트 = Forward: Matching 된 테이블의 forward list 로\n프레임을 포워딩.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.emac1 에 multicast mac 을 static 으로 설정한다.",
        "Sequence": "2. Tester_1 -> emac1 으로 multicast traffic 을 인가한다.\n1. emac1 에 multicast mac 을 static 으로 설정한다.\ntc-tpa bd_mac add --vlan=1 --mac=01:00:5e:01:01:01 --polist=0x2 --\nhact=0 --tc=0 --hifch=0",
        "Input": "2. Tester_1 -> emac1 으로 multicast traffic 을생성한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  01:00:5e:01:01:01  100.1.1.1  239.1.1.1",
        "Expected Result": "2. C1_2 로 traffic 이 올바르게 수신된다.",
        "Test output": "FAIL",
        "Test result": "-. Dynamic mac learning 불가(Linux Master OK. T 사 작업 필요)",
        "page": 110,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "01:00:5e:01:01:01",
            "SIP": "100.1.1.1",
            "DIP": "239.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "VACT-005",
        "Description": "VLAN\" 매치가 실패 시 처리를 위한 Action 을 제공해야 한다.\n- 지정 디폴트 = Discard: 매치 실패 시 해당 프레임을 Discard.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. TPA mac table 을 Clear 한다.\n2. TPA vlan action 을 flood 로 설정한다.\n3. C1_1 -> emac1 을 인가한다.",
        "Sequence": "4. TPA mac table 을 clear 한다.\n5. TPA vlan action 을 discard 로 설정한다.\n6. Tester_1 -> emac1 을 인가한다.\n2. TPA vlan action 을 flood 로 설정한다.\ntc-tpa bd add --vlan=1 --fpl=0x1f --utl=0 --mh=0 --mm=1 --uh=0 --\num=0 --msta=0\n3. C1_1 -> emac1 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  1",
        "Input": "5. TPA vlan action 을 discard 로 설정한다.\ntc-tpa bd add --vlan=1 --fpl=0x1f --utl=0 --mh=0 --mm=3 --uh=0 --\num=0 --msta=0\n6. Tester_1 -> emac1 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  1\n3. emac1 으로 수신된 traffic 이 flooding 되는지 확인한다.",
        "Expected Result": "6. emac1 으로 수신된 traffic 이 discard 되는지 확인한다.",
        "Test output": "FAIL",
        "Test result": "-. Dynamic mac learning 불가(Linux Master OK. T 사 작업 필요)",
        "page": 111,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "CBGEN-001",
        "Description": "기능을 제공해야 한다.\n- Stream Relay 와 Stream Listener 는 프레임 중복을 제거하고 RTag 를\n해석할 수 있는 ‘Stream Recovery’ 기능을 제공해야 한다.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "fallback_bd_id 1 --block_state 0 --csr_untag_btable 1 --phy 2\n2. TPA 의 arp 를 차단하는 rule 을 입력한다.",
        "page": 112,
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBGEN-002",
        "Description": "- 최대 32 개의 Stream Talker 를 등록/관리해야 한다.\n- 최대 8 개의 Stream Listener 를 등록/관리해야 한다.\n- 최대 64 개의 Stream Relay 를 등록/관리해야 한다.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "1. talker 32 개를 등록한다.",
        "Sequence": "2. listener 8 개를 등록한다.\n3. relay 64 개를 등록한다.\n1. talker 32 개를 등록한다.\ntc-tpa cb add --mac=00:00:00:00:33:01 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n-------------------------------중간 생략----------------------------------\ntc-tpa cb add --mac=00:00:00:00:33:32 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n2. listener 8 개를 등록한다.",
        "Input": "tc-tpa cb add --mac=00:00:00:00:22:01 --vlan=1 --id_type=0 --fpl=0x3 --\nevr=1 --err=1 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x1 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=20 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n-------------------------------중간 생략----------------------------------\ntc-tpa cb add --mac=00:00:00:00:22:08 --vlan=1 --id_type=0 --fpl=0x3 --\nevr=1 --err=1 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x1 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=20 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n3. relay 64 개를 등록한다.\ntc-tpa cb add --mac=00:00:00:00:22:01 --vlan=1 --id_type=0 --fpl=0x3 --\nevr=0 --err=0 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x1 --vrpl=0 --",
        "page": 115,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBGEN-003",
        "Description": "등록해야 한다.\n- Stream 은 MAC 주소와 VLAN-ID 로 식별될 수 있어야 한다.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "1. mac=00:00:00:00:22:22 / vid=10 인 cb 를 add 한다.",
        "Sequence": "2. mac=00:00:00:00:11:11 / vid=20 인 cb 를 add 한다.\n1. mac=00:00:00:00:22:22 / vid=10 인 cb 를 add 한다.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=10 --id_type=0 --fpl=0x3\n--evr=0 --err=0 --er=0 --esg=1 --emv=1 --evi=1 --reb=0 --vrpl=0x0 --\nrrpl=0x0 --pdl=0 --mv=20 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000",
        "Input": "2. mac=00:00:00:00:11:11 / vid=20 인 cb 를 add 한다.\ntc-tpa cb add --mac=00:00:00:00:11:11 --vlan=20 --id_type=0 --fpl=0x3\n--evr=0 --err=0 --er=0 --esg=1 --emv=1 --evi=1 --reb=0 --vrpl=0x0 --\nrrpl=0x0 --pdl=0 --mv=20 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000",
        "Expected Result": "2.stream 은 mac 주소와 vlan-id 로 올바르게 식별된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 CB 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 117,
        "Input_table": []
      },
      {
        "Test case ID": "CBGEN-004",
        "Description": "한다(Action 에 대한 상세 내용은 Talker, Listener, Relay 요구사항 참조).",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "1.cb rule 을 입력한다.",
        "Sequence": "2.cu rule 을 확인한다.\n1.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x3 --",
        "Input": "evr=0 --err=0 --er=0 --esg=1 --emv=1 --evi=1 --reb=0 --vrpl=0x0 --\nrrpl=0x0 --pdl=0 --mv=20 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000",
        "Expected Result": "2.stream 별로 stream function 처리를 위한 action 을 올바르게 제공한다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 CB 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 118,
        "Input_table": []
      },
      {
        "Test case ID": "CBGEN-005",
        "Description": "- CB Stream Table 과 SMAC Table 은 HASH 방식으로 액세스해야 하며,\nStream Relay 와 Listener 기능이 활성화된 경우 CB Stream Table 을 통해\nCB Recovery Table 에 대한 직접 참조가 가능해야 한다.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "1.id_type = smac 인 cb 를 add 한다.",
        "Sequence": "2.sequence 1 cb rule 을 조회한다.\n3.sequence 1 cb rule 을 삭제한다.\n1.\ntc-tpa cb add --mac=00:00:00:00:11:11 --vlan=1 --id_type=1 --fpl=0x3 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0x0 --\nrrpl=0x0 --pdl=0 --mv=20 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\ntc-tpa smac_vlan add --mac=00:00:00:00:11:11 --vlan=40",
        "Input": "2.\ntc-tpa cb show --mac=00:00:00:00:11:11 --vlan=1 --id_type=1\n3.\ntc-tpa cb del --mac=00:00:00:00:11:11 --vlan=1 --id_type=1\ntc-tpa smac_vlan del --mac=00:00:00:00:11:11\n2.add 한 cb rule 이 올바르게 조회된다.",
        "Expected Result": "3.add 한 cb rule 이 올바르게 삭제된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 CB 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 119,
        "Input_table": []
      },
      {
        "Test case ID": "CBGEN-006",
        "Description": "Steam 을 수신한 EMAC 포트를 제외한 하나 이상의 EMAC 포트로\n지정해야 한다.\n- 단일 Stream 에 대해 Talker 와 Listener/Relay 기능의 동시 활성화는\n제공하지 않는다.\nC1_1(talker#1) -> TPA#1emac1 -> C1_3",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "1.vlan10 add 한다.",
        "Sequence": "2.TPA#1 에 relay 를 설정한다.\n3.Tester_1,2 에서 traffic 을 송신한다.\n1. vlan10 add 한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\n2. TPA#1 에 relay 를 설정한다.\n- relay(emac4) + listener(HIF)\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=10 --id_type=0 --fpl=0x18\n--evr=0 --err=0 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x1 --vrpl=0 --",
        "Input": "rrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n3. Tester_1,2 에서 traffic 을 송신한다.\nPort  SMAC  DMAC  VID  Sequence\nT1  00:00:00:00:11:11  00:00:00:00:22:22  10  1\nT2  00:00:00:00:11:11  00:00:00:00:22:22  10  1\n3.TPA#1 emac1,2 으로 수신된 복제된 traffic 이 TPA#1 emac4, HIF 로",
        "Expected Result": "sequence recovery 하여 복제된 패킷 중 1 개만 Tester_3, HIF 로\n송신한다.",
        "page": 120,
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBGEN-007",
        "Description": "중복 수신한 프레임을 Forwarding 하지 않는다.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "1.TPA#1 에서 emac2,3 로 복제되며 id_type = NULL 인 cb 를 add 한다.",
        "Sequence": "2.TPA#3 listener/relay 설정을 하지 않는다.\n3.Tester 에서 TPA#1 emac1 으로 untagged traffic 1 개를 인가한다.\n2. TPA#1 에서 emac2,3 로 복제되며 id_type = NULL 인 cb 를 add 한다.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000",
        "Input": "3. Tester 에서 TPA#1 emac1 으로 untagged traffic 1 개를 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\n3.TPA#3 은 listener/relay 가 설정되지 않았기 때문에 talker 로부터",
        "Expected Result": "수신한 중복 프레임을 forwarding 하지 않는다.\n3. TPA#3 은 listener/relay 가 설정되지 않았기 때문에 talker 로부터\n수신한 중복 프레임을 forwarding 하지 않는다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 122,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "CBSID-001",
        "Description": "MAC 주소와 VLAN-ID 로 식별한다.\n- SMAC: SMAC Table 에 등록한 엔트리 정보를 활용한 Stream\nIdentification. Stream 은 Stream 의 Source MAC 주소와 VLAN-ID 로\n식별한다.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa  bd_mac  add  --mac=00:00:00:00:22:22  --polist=0x10  --vlan=1  --\nhact=0 --tc=0 --hifch=0\n4. id_type=smac test 를 위하여 TPA#3,4 에 vlan40 을 추가한다.\ntc-tpa bd add --vlan=40 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n1.id_type = NULL 인 cb 를 add 한다.\n2. Tester_1 에서 TPA#1 emac1 으로 traffic 을 인가한다.",
        "Sequence": "3. id_type = smac 인 cb 를 add 한다.\n4. Tester_1 에서 TPA#1 emac1 으로 traffic 을 인가한다.",
        "Input": "1. id_type = NULL 인 cb 를 add 한다.(vlan40 추가)",
        "page": 123,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBLSN-001",
        "Description": "만족해야 한다.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa  bd_mac  add  --mac=00:00:00:00:22:22  --polist=0x10  --vlan=1  --\nhact=0 --tc=0 --hifch=0\n4. id_type=smac test 를 위하여 TPA#3,4 에 vlan40 을 추가한다.\ntc-tpa bd add --vlan=40 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n1.id_type = NULL 인 cb 를 add 한다.\n2. Tester_1 에서 TPA#1 emac1 으로 traffic 을 인가한다.",
        "Sequence": "3. id_type = smac 인 cb 를 add 한다.\n4. Tester_1 에서 TPA#1 emac1 으로 traffic 을 인가한다.\n1. id_type = NULL 인 cb 를 add 한다.(vlan40 추가)\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=1 --evi=1 --reb=0 --vrpl=0x0 --",
        "Input": "rrpl=0x0 --pdl=0 --mv=40 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n2. Tester_1 에서 TPA#1 emac1 으로 traffic 을 인가한다.",
        "page": 126,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBLSN-002",
        "Description": "- Untagged 멤버: VLAN-Tag 및 RTag 삭제 기능을 제공해야 한다.\n- Tagged 맴버: RTag 삭제 기능을 제공해야 한다.\nC1_1(talker#1) -> TPA#1emac1 -> C1_3",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "1.vlan10 add 한다.\n2.TPA#1 에 relay 를 설정한다.\n3.Tester_1,2 에서 traffic 을 송신한다.",
        "Sequence": "4.vlan10 add 한다.\n5.TPA#1 에 relay 를 설정한다.\n6.Tester_1,2 에서 traffic 을 송신한다.\n1. vlan10 add 한다.\n-. Hif vlan tag 멤버\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\n2. TPA#1 에 relay 를 설정한다.\n- listener(HIF), rtag 삭제\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=10 --id_type=0 --fpl=0x10\n--evr=0 --err=1 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x1 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000",
        "Input": "3. Tester_1,2 에서 traffic 을 송신한다.\nPort  SMAC  DMAC  VID  Sequence\nT1  00:00:00:00:11:11  00:00:00:00:22:22  10  1\nT2  00:00:00:00:11:11  00:00:00:00:22:22  10  1\n4.vlan10 add 한다.\n-. Hif utag 멤버\ntc-tpa bd add --vlan=10 --fpl=0xf --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0",
        "page": 129,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBLSN-003",
        "Description": "있는 “Sequence Recovery” 기능을 제공해야 한다.\nC1_1(talker#1) -> TPA#1emac1 -> C1_3",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "1.vlan10 add 한다.",
        "Sequence": "2.TPA#1 에 relay 를 설정한다.\n3.Tester_1,2 에서 traffic 을 송신한다.\n1. vlan10 add 한다.\n-. Hif vlan tag 멤버\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\n2. TPA#1 에 relay 를 설정한다.\n- listener(HIF), rtag 삭제\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=10 --id_type=0 --fpl=0x10",
        "Input": "--evr=0 --err=0 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x1 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n3. Tester_1,2 에서 traffic 을 송신한다.\nPort  SMAC  DMAC  VID  Sequence\nT1  00:00:00:00:11:11  00:00:00:00:22:22  10  1\nT2  00:00:00:00:11:11  00:00:00:00:22:22  10  1\n3.TPA#1 emac1,2 으로 수신된 복제된 traffic 이 TPA#1 HIF 로 sequence",
        "Expected Result": "recovery 하여 복제된 패킷 중 1 개만 HIF 로 송신한다.\n3. TPA#1 emac1,2 으로 수신된 복제된 traffic 이 TPA#1 HIF 로 sequence\nrecovery 하여 복제된 패킷 중 1 개만 HIF 로 송신한다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 131,
        "Input_table": []
      },
      {
        "Test case ID": "CBLSN-004",
        "Description": "수신 시 Drop 하고, 그 이외의 패킷은 수신해야 한다.\n- Vector Recovery Algorithm: Sequence History 와 Sequence History\nLength 로 설정된 범위내에 수신한 패킷은 Accept 하고 그 이외의\n패킷은 Drop 해야 한다.\nC1_1(talker#1) -> TPA#1emac1 -> C1_3",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "1.vlan10 add 한다.\n2.TPA#1 에 relay 를 설정한다.",
        "Sequence": "3.Tester_1,2 에서 traffic 을 송신한다.\n4.Tester_1,2 에서 traffic 을 송신한다.\n5.Tester_1,2 에서 traffic 을 송신한다.",
        "page": 132,
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBLSN-005",
        "Description": "- Sequence History: 32 비트 비트맵으로 현재 수용할 수 있는 32 개\n시퀀스 범위 내에서 최하위 시퀀스(bit-0)와 최상위 시퀀스(bit-31)의 패킷\n수신 여부를 나타낸다.\n해당 범위 내에서 수신된 패킷은 1, 미 수신 패킷은 0.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NT",
        "Test result": "-. linuxmaster 우선 시험 후 FreeRTOS 에서 시험예정",
        "page": 134,
        "Input_table": []
      },
      {
        "Test case ID": "CBLSN-006",
        "Description": "시퀀스를 리셋하는 기능을 제공해야 한다. 이 시간은 ms 단위로 지정이\n가능해야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NT",
        "Test result": "-. linuxmaster 우선 시험 후 FreeRTOS 에서 시험예정",
        "page": 135,
        "Input_table": []
      },
      {
        "Test case ID": "CBLSN-007",
        "Description": "Drop 할 수 있어야 하며 Drop 된 패킷의 통계를 제공해야 한다.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa  bd_mac  add  --mac=00:00:00:00:22:22  --polist=0x10  --vlan=1  --\nhact=0 --tc=0 --hifch=0\n4. id_type=smac test 를 위하여 TPA#3,4 에 vlan40 을 추가한다.\ntc-tpa bd add --vlan=40 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n1.id_type = NULL 인 cb 를 add 한다.\n2.Tester 에서 TPA#1 emac1 으로 traffic 을 인가한다.",
        "Sequence": "3.TPA#4 에 listener 를 설정한다.\n-. emac3 으로 수신되는 패킷을 drop\n1.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --",
        "Input": "ssn=20000\n2.\nPort  SMAC  DMAC  SIP  DIP",
        "page": 136,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBLSN-008",
        "Description": "- Passed Count: Relay, Listener 에서 수신 처리한 패킷 수.\n- Tx Count: Talker 에서 송신한 패킷 수.\n- Out-of-Order Count: 비순서로 수신한 패킷 수.\n- Reset Count: Sequence Reset 이 발생한 횟수.\n- Discard Count: Recovery Algorithm 에 의해 Discard 된 패킷 수.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "1.TPA#1 에서 emac1,2 로 복제되며 id_type = NULL 인 cb 를 add 한다.",
        "Sequence": "2.TPA#2 에서 emac4 로 복제되며 id_type = NULL 인 cb 를 add 한다.\n3.Tester_3 에서 TPA#1 emac4 으로 untagged traffic 1 개를 인가한다.\n1.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x3 --\nevr=0 --err=0 --er=0 --esg=1 --emv=1 --evi=1 --reb=0 --vrpl=0x0 --\nrrpl=0x0 --pdl=0 --mv=20 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n2.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=20 --id_type=0 --fpl=0x8",
        "Input": "--evr=0 --err=0 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x01 --\nvrpl=0x10 --rrpl=0x10 --pdl=0 --mv=20 --pcp=6 --rat=0 --shl=32 --\nsrrm=60000 --ssn=20000\n3.\nPort  SMAC  DMAC  SIP  DIP  VID\nT3  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  1",
        "Expected Result": "3.TPA#2 emac1,2 로 수신된 traffic 이 TPA#2 emac4 로 송신된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 CB 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 138,
        "Input_table": [
          {
            "Port": "T3",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "CBTLK-001",
        "Description": "한다.\n2.2",
        "Test Environment": "C1_1 -> TPA#1emac1 -> TPA#1emac2 -> TPA#3emac2",
        "Test Method": "",
        "Preconditions": "-mask_vlan_id=1 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa  bd_mac  add  --mac=00:00:00:00:22:22  --polist=0x10  --vlan=1  --\nhact=0 --tc=0 --hifch=0\n4. id_type=smac test 를 위하여 TPA#3,4 에 vlan40 을 추가한다.\ntc-tpa bd add --vlan=40 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n1.id_type = NULL 인 cb 를 add 한다.",
        "Sequence": "2.Tester 에서 emac1 으로 traffic 을 인가한다.\n1. id_type = NULL 인 cb 를 add 한다.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --",
        "Input": "rrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n2. Tester 에서 emac1 으로 traffic 을 인가한다.",
        "page": 139,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBTLK-002",
        "Description": "제공해야 하고, RTag 를 추가해야 한다. RTag 는 IEEE802.1CB 를 준수해야\n한다.\n2.2",
        "Test Environment": "C1_1 -> TPA#1emac1 -> TPA#1emac2 -> TPA#3emac2",
        "Test Method": "",
        "Preconditions": "-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa  bd_mac  add  --mac=00:00:00:00:22:22  --polist=0x10  --vlan=1  --\nhact=0 --tc=0 --hifch=0\n4. id_type=smac test 를 위하여 TPA#3,4 에 vlan40 을 추가한다.\ntc-tpa bd add --vlan=40 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n1.id_type = NULL 인 cb 를 add 한다.",
        "Sequence": "2.Tester 에서 emac1 으로 traffic 을 인가한다.\n1. id_type = NULL 인 cb 를 add 한다.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --",
        "Input": "rrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n2. Tester 에서 emac1 으로 traffic 을 인가한다.",
        "page": 141,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBTLK-003",
        "Description": "있어야 한다.(HIF 포트는 Talker 미지원)\n2.2",
        "Test Environment": "C1_1 -> TPA#1emac1 -> TPA#1emac2 -> TPA#3emac2",
        "Test Method": "",
        "Preconditions": "1.id_type = NULL 인 cb 를 add 한다.",
        "Sequence": "2.Tester 에서 emac1 으로 traffic 을 인가한다.\n1. id_type = NULL 인 cb 를 add 한다.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000",
        "Input": "2. Tester 에서 emac1 으로 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\n2.TPA#1 emac1 로 수신된 traffic 이 복제되어 TPA#1 emac2,3 으로",
        "Expected Result": "송신되며, TPA#3,4 emac2,3 으로 rtag 를 추가하여 올바르게 수신된다.\n2. TPA#1 emac1 로 수신된 traffic 이 복제되어 TPA#1 emac2,3 으로\n송신되며, TPA#3,4 emac2,3 으로 rtag 를 추가하여 올바르게 수신된다.\n-.TPA#3 emac2",
        "Test output": "-. TPA#4 emac3",
        "Test result": "PASS",
        "page": 143,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "CBTLK-004",
        "Description": "이상의 EMAC 포트로 송신할 수 있어야 한다.\n2.2",
        "Test Environment": "C1_1 -> TPA#1emac1 -> TPA#1emac2 -> TPA#3emac2",
        "Test Method": "",
        "Preconditions": "-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa  bd_mac  add  --mac=00:00:00:00:22:22  --polist=0x10  --vlan=1  --\nhact=0 --tc=0 --hifch=0\n4. id_type=smac test 를 위하여 TPA#3,4 에 vlan40 을 추가한다.\ntc-tpa bd add --vlan=40 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n1.id_type = NULL 인 cb 를 add 한다.",
        "Sequence": "2.Tester 에서 emac1 으로 traffic 을 인가한다.\n1. id_type = NULL 인 cb 를 add 한다.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --",
        "Input": "ssn=20000\n2. Tester 에서 emac1 으로 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP",
        "page": 145,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBTLK-005",
        "Description": "- ID_Type 이 NULL 인 경우: 별도의 VLAN-ID 매핑 정보를 제공해야\n한다.\n- ID_Type 이 SMAC 인 경우: SMAC 테이블 엔트리에 설정한 VLAN-ID\n정보를 활용해야 한다.\n2.2",
        "Test Environment": "C1_1 -> TPA#1emac1 -> TPA#1emac2 -> TPA#3emac2",
        "Test Method": "",
        "Preconditions": "-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa  bd_mac  add  --mac=00:00:00:00:22:22  --polist=0x10  --vlan=1  --\nhact=0 --tc=0 --hifch=0\n4. id_type=smac test 를 위하여 TPA#3,4 에 vlan40 을 추가한다.\ntc-tpa bd add --vlan=40 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n1.id_type = NULL 인 cb 를 add 한다.\n2. Tester_1 에서 TPA#1 emac1 으로 traffic 을 인가한다.",
        "Sequence": "3. id_type = smac 인 cb 를 add 한다.\n4. Tester_1 에서 TPA#1 emac1 으로 traffic 을 인가한다.",
        "Input": "1. id_type = NULL 인 cb 를 add 한다.(vlan40 추가)",
        "page": 147,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBTLK-006",
        "Description": "- ID_Type 이 SMAC 인 경우 : SMAC 테이블 엔트리에 설정한 VLAN-ID\n정보를 활용해야 한다.\nStream Talker 기능이 활성화된 경우, TPA 는 해당 Relay 와 Listener 에서\n중복 프레임 처리를 지원하기 위해 Stream 에 Sequence Number 를\n지정하여 송신한다.\n2.2",
        "Test Environment": "C1_1 -> TPA#1emac1 -> TPA#1emac2 -> TPA#3emac2",
        "Test Method": "",
        "Preconditions": "-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa  bd_mac  add  --mac=00:00:00:00:22:22  --polist=0x10  --vlan=1  --\nhact=0 --tc=0 --hifch=0\n4. id_type=smac test 를 위하여 vlan40 을 추가한다.\ntc-tpa bd add --vlan=40 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n1.id_type = NULL 인 cb 를 add 한다.",
        "Sequence": "2.Tester_1 에서 TPA#1 emac1 으로 tag10 인 traffic 을 인가한다.",
        "page": 150,
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBTLK-007",
        "Sequence": "2.Tester_1 에서 TPA#1 emac1 으로 traffic 을 2 개 인가한다.\n1. id_type = NULL 인 cb 를 add 한다.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000",
        "Description": "Stream 송신 시 지정된 값에서 1 씩 추가되어 RTag 의 Sequence\nNumber 필드에 반영되어야 한다.\n2.2",
        "Test Environment": "C1_1 -> TPA#1emac1 -> TPA#1emac2 -> TPA#3emac2",
        "Test Method": "",
        "Preconditions": "--ip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa  bd_mac  add  --mac=00:00:00:00:22:22  --polist=0x10  --vlan=1  --\nhact=0 --tc=0 --hifch=0\n1.id_type = NULL 인 cb 를 add 한다.",
        "Input": "2. Tester_1 에서 TPA#1 emac1 으로 traffic 을 2 개 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1",
        "page": 153,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "CBTLK-008",
        "Sequence": "2.Tester 에서 TPA#1 emac1 으로 traffic 을 인가한다.\n1. id_type = NULL 인 cb 를 add 한다.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=65535",
        "Description": "Stream 의 Sequence Number 는 0 으로 리셋되어야 하고(Sequence Roll-\nOver), RTag 의 Sequence Number 필드에 반영되어야 한다.\n2.2",
        "Test Environment": "C1_1 -> TPA#1emac1 -> TPA#1emac2 -> TPA#3emac2",
        "Test Method": "",
        "Preconditions": "--ip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa bd_mac add --mac=00:00:00:00:22:22 --polist=0x10 --vlan=1 --\nhact=0 --tc=0 --hifch=0\n1.id_type = NULL 인 cb 를 add 한다.",
        "Input": "2. Tester 에서 TPA#1 emac1 으로 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1",
        "page": 155,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "CBTLK-009",
        "Description": "TPA Talker 는 각 Steam 에 대해 송신한 패킷 통계를 제공해야 한다.\n2.2",
        "Test Environment": "C1_1 -> TPA#1emac1 -> TPA#1emac2 -> TPA#3emac2",
        "Test Method": "",
        "Preconditions": "--ip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa bd_mac add --mac=00:00:00:00:22:22 --polist=0x10 --vlan=1 --\nhact=0 --tc=0 --hifch=0\n1.id_type = NULL 인 cb 를 add 한다.",
        "Sequence": "2.Tester 에서 emac1 으로 traffic 을 2 개 인가한다.\n1.\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=0 --evi=1 --reb=0 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=65535",
        "Input": "2.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\n2.TPA#1 emac1 로 수신된 traffic 이 복제된 패킷의 통계가 올바르게",
        "Expected Result": "증가한다.",
        "Test output": "",
        "Test result": "NA",
        "page": 157,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "CBREL-001",
        "Description": "한다.",
        "Test Environment": "2.2",
        "Test Method": "",
        "Preconditions": "1. 2.5G port(emac3)를 slave 로 설정하여 link up 시킨다.\ntc-tpa bd_port config --portNo 3 --shutdown 0 --tpid 0x8100 --aft 0 --\nfallback_bd_id 1 --block_state 0 --csr_untag_btable 1 --phy 2\n2. TPA 의 arp 를 차단하는 rule 을 입력한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0x0806\n--ip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -",
        "Sequence": "-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n3. 00:00:00:00:22:22 의 polist 를 hif 로 설정한다.\ntc-tpa  bd_mac  add  --mac=00:00:00:00:22:22  --polist=0x10  --vlan=1  --\nhact=0 --tc=0 --hifch=0\n4. id_type=smac test 를 위하여 TPA#3,4 에 vlan40 을 추가한다.\ntc-tpa bd add --vlan=40 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=0 --msta=0\n1.id_type = NULL 인 cb 를 add 한다.\n2. Tester_1 에서 TPA#1 emac1 으로 traffic 을 인가한다.",
        "Input": "3. id_type = smac 인 cb 를 add 한다.\n4. Tester_1 에서 TPA#1 emac1 으로 traffic 을 인가한다.\n1. id_type = NULL 인 cb 를 add 한다.(vlan40 추가)\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=1 --id_type=0 --fpl=0x6 --\nevr=0 --err=0 --er=0 --esg=1 --emv=1 --evi=1 --reb=0 --vrpl=0x0 --",
        "Expected Result": "rrpl=0x0 --pdl=0 --mv=40 --pcp=6 --rat=0 --shl=32 --srrm=60000 --\nssn=20000",
        "page": 159,
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBREL-002",
        "Description": "이상의 포트로 포워딩 할 수 있어야 한다.\n- Individual Recovery for EMAC3: Relay 는 talker 부터 수신한 stream 을\n식별하고, 중복 프레임을 생성하여 EMAC1, EMAC2, EMAC4 중 하나\n이상의 포트로 포워딩 할 수 있어야 한다.\n- Individual Recovery for EMAC4: Relay 는 talker 부터 수신한 stream 을\n식별하고, 중복 프레임을 생성하여 EMAC1, EMAC2, EMAC3 중 하나\n이상의 포트로 포워딩 할 수 있어야 한다.\n- Sequence Recovery: Relay 는 수신된 중복 프레임을 외부로 송신 시\n송신 포트에서 중복 프레임 중 하나를 선택하여 송신할 수 있어야 한다.\nC1_1(talker#1) -> TPA#1emac1 -> C1_3",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "1.vlan10 add 한다.",
        "Sequence": "2.TPA#1 에 relay 를 설정한다.\n3.Tester_1,2 에서 traffic 을 송신한다.\n1. vlan10 add 한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\n2. TPA#1 에 relay 를 설정한다.",
        "Input": "tc-tpa cb add --mac=00:00:00:00:22:22 --vlan=10 --id_type=0 --fpl=0x8\n--evr=0 --err=0 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x1 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n3. Tester_1,2 에서 traffic 을 송신한다.",
        "page": 162,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBREL-003",
        "Description": "“Sequence Recovery” 기능을 제공해야 한다. (값은 [CBREL-002] 참고).\nC1_1(talker#1) -> TPA#1emac1 -> C1_3",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "1.vlan10 add 한다.",
        "Sequence": "recovery 하여 복제된 패킷 중 1 개만 Tester_3 로 송신한다.",
        "Input": "rrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n3. Tester_1,2 에서 traffic 을 송신한다.\nPort  SMAC  DMAC  VID  Sequence\nT1  00:00:00:00:11:11  00:00:00:00:22:22  10  1\nT2  00:00:00:00:11:11  00:00:00:00:22:22  10  1\n5.TPA#1 emac1,2 으로 수신된 복제된 traffic 이 TPA#1 emac4 로",
        "Expected Result": "",
        "Test output": "",
        "page": 164,
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBREL-004",
        "Description": "- IEEE892.1CB 미지원/VLAN Tag 멤버: Sequence Recovery 제공, RTag\n삭제.\n- IEEE802.1CB 미지원/Untag 멤버: Sequence Recovery 제공, VLAN-Tag\n삭제, RTag 삭제.\nTPA 의 HIF(fp0)가 Stream Listener 로 동작하는 경우 Relay 와 함께\n기능이 활성화될 수 있다.\nC1_1(talker#1) -> TPA#1emac1 -> C1_3",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "1.vlan10 add 한다.\n2.TPA#1 에 relay 를 설정한다.\n3.Tester_1,2 에서 traffic 을 송신한다.",
        "Sequence": "4.TPA#1 에 relay 를 설정한다.\n5.Tester_1,2 에서 traffic 을 송신한다.\n6.TPA#1 에 relay 를 설정한다.\n7.Tester_1,2 에서 traffic 을 송신한다.\n1. vlan10 add 한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\n2. TPA#1 에 relay 를 설정한다.\n-. Vlan 유지, rtag 유지",
        "Input": "tc-tpa cb add --mac=00:00:00:00:22:22 --vlan=10 --id_type=0 --fpl=0x8\n--evr=0 --err=0 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x1 --vrpl=0 --\nrrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n3. Tester_1,2 에서 traffic 을 송신한다.",
        "page": 166,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBREL-005",
        "Description": "이상의 EMAC 포트로 지정해야 한다.\n- Listener: HIF(fp0)\n- Relay: EMACs – EMAC(talker)\nC1_1(talker#1) -> TPA#1emac1 -> C1_3",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "1.vlan10 add 한다.",
        "Sequence": "2.TPA#1 에 relay 를 설정한다.\n3.Tester_1,2 에서 traffic 을 송신한다.\n1. vlan10 add 한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\n2. TPA#1 에 relay 를 설정한다.\n- relay(emac4) + listener(HIF)\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=10 --id_type=0 --fpl=0x18\n--evr=0 --err=0 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x1 --vrpl=0 --",
        "Input": "rrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n3. Tester_1,2 에서 traffic 을 송신한다.\nPort  SMAC  DMAC  VID  Sequence\nT1  00:00:00:00:11:11  00:00:00:00:22:22  10  1\nT2  00:00:00:00:11:11  00:00:00:00:22:22  10  1\n3.TPA#1 emac1,2 으로 수신된 복제된 traffic 이 TPA#1 emac4, HIF 로",
        "Expected Result": "sequence recovery 하여 복제된 패킷 중 1 개만 Tester_3, HIF 로\n송신한다.\n3.TPA#1 emac1,2 으로 수신된 복제된 traffic 이 TPA#1 emac4, HIF 로",
        "Test output": "sequence recovery 하여 복제된 패킷 중 1 개만 Tester_3, HIF 로\n송신한다.",
        "page": 169,
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "CBREL-006",
        "Description": "- Listener 가 VLAN Tag 멤버인 경우: RTag 삭제.\n- Listener 가 Untag 인 경우: VLAN-Tag 삭제, RTag 삭제.\nC1_1(talker#1) -> TPA#1emac1 -> C1_3",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "1.vlan10 add 한다.",
        "Sequence": "2.TPA#1 에 relay 를 설정한다.\n3.Tester_1,2 에서 traffic 을 송신한다.\n1. vlan10 add 한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\n2. TPA#1 에 relay 를 설정한다.\n- relay(emac4) + listener(HIF)\ntc-tpa cb add --mac=00:00:00:00:22:22 --vlan=10 --id_type=0 --fpl=0x18\n--evr=0 --err=1 --er=1 --esg=0 --emv=0 --evi=0 --reb=0x1 --vrpl=0 --",
        "Input": "rrpl=0 --pdl=0 --mv=0 --pcp=0 --rat=0 --shl=32 --srrm=60000 --\nssn=20000\n3. Tester_1,2 에서 traffic 을 송신한다.\nPort  SMAC  DMAC  VID  Sequence\nT1  00:00:00:00:11:11  00:00:00:00:22:22  10  1\nT2  00:00:00:00:11:11  00:00:00:00:22:22  10  1\n3.TPA#1 emac1,2 으로 수신된 복제된 traffic 이 TPA#1 emac4, HIF 로",
        "Expected Result": "sequence recovery 하여 복제된 패킷 중 1 개만 Tester_3, HIF 로\n송신한다.",
        "Test output": "FAIL",
        "Test result": "FreeRTOS 상 CB 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 171,
        "Input_table": []
      },
      {
        "Test case ID": "ACLGEN-001",
        "Description": "63 까지의 Position(Index)로 지정할 수 있으며, Position 이 낮은 Rule 이\n높은 Matching 우선 순위를 갖는다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.acl rule 64 개를 설정한다.",
        "Sequence": "2. Tester_1 -> emac1 로 traffic 을 생성한다.\n3. Tester traffic 을 인가한다.\n1. acl rule 64 개를 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:01 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=ff:ff:ff:ff:ff:ff --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:02 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=ff:ff:ff:ff:ff:ff --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -",
        "Input": "-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n---------------------------중략-------------------------------\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:40 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=ff:ff:ff:ff:ff:ff --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n2. Tester_1 -> emac1 로 traffic 을 생성한다.",
        "page": 172,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "ACLGEN-002",
        "Description": "시 전체 조회 및 Position 에 의한 조회 기능을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. acl rule index 0 을 설정한다.\n2. acl table 을 전체 조회 및 index 별 조회를 한다.",
        "Sequence": "3. acl rule index 0 을 삭제한다.\n4. acl table 을 전체 조회 및 index 별 조회를 한다.\n1. acl rule index 0 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:40 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=ff:ff:ff:ff:ff:ff --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop",
        "Input": "2. acl table 을 전체 조회 및 index 별 조회를 한다.\ntc-tpa acl show --all\ntc-tpa acl show --id=0\n3. acl rule index 0 을 삭제한다.\ntc-tpa acl del --id=0\n1. acl index 0 가 전체조회 및 index 별 조회가 올바르게 된다.",
        "Expected Result": "4. acl 이 올바르게 삭제된다.",
        "Test output": "1. acl index 0 가 전체조회 및 index 별 조회가 올바르게 된다.",
        "page": 174,
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "ACLGEN-005",
        "Description": "방지하기 위한 기능을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. acl rule index 0 을 설정한다.",
        "Sequence": "2. index0 에 ACL rule 을 설정한다.\n1. acl rule index 0 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=1 --src_mac=00:00:00:00:00:40 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=ff:ff:ff:ff:ff:ff --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop",
        "Input": "2. index0 에 ACL rule 을 설정한다.\ntc-tpa acl add --id=0 --iport=1 --vlan=1 --src_mac=00:00:00:00:00:40 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=ff:ff:ff:ff:ff:ff --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop",
        "Expected Result": "2.동일 index 에 rule 이 등록되지 않는다.\n2.동일 index 에 rule 이 등록되지 않는다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 176,
        "Input_table": []
      },
      {
        "Test case ID": "ACLKEY-001",
        "Description": "KEY 는 하나 이상의 수신 포트를 지정할 수 있어야 하며, 매칭이 성공한\n경우 지정된 Action 을 수행해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. inport 가 0x3 이며 action 이 drop 인 acl 을 설정한다.\n2. Tester_1,2 을 emac1,2 로 인가한다.",
        "Sequence": "3. Tester_3 을 emac4 로 인가한다.\n4. inport 가 0x3 이며 action 이 forward 인 acl 을 설정한다.\n5. Tester_1,2 을 emac,1,2 로 인가한다.\n1. inport 가 0x3 이며 action 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0x3 --vlan=0 --src_mac=00:00:00:00:00:00 -\n-dst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n2. Tester 을 emac1,2 로 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1",
        "Input": "T2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1\n3. Tester_3 을 emac4 로 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT3  00:00:00:00:33:33  00:00:00:00:11:11  100.1.1.1  200.1.1.1\n4. inport 가 0x3 이며 action 이 forward 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0x3 --vlan=0 --src_mac=00:00:00:00:00:00 -\n-dst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -",
        "page": 177,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T3",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLKEY-002",
        "Description": "제공해야 하며, 매칭이 성공한 경우 지정된 Action 을 수행해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. vlan 가 10 이며 action 이 drop 인 acl 을 설정한다.\n2. Tester_1,2 에 tag 10 ,11 traffic 을 생성한다.\n3. Tester traffic 을 인가한다.",
        "Sequence": "4. vlan 가 10 이며 action 이 forward 인 acl 을 설정한다.\n5. Tester_1 에 tag 10 traffic 을 생성한다.\n6. Tester traffic 을 인가한다.\n1. vlan 가 10 이며 action 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=10 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0xffff --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop --match_vlan=1\n3. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2  10\nT1  00:00:00:00:33:33  00:00:00:00:44:44  100.1.1.3  100.1.1.4  11",
        "Input": "T2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  10\nT2  00:00:00:00:44:44  00:00:00:00:33:33  100.1.1.4  100.1.1.3  11\n4. vlan 가 10 이며 action 이 forward 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=10 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0xffff --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0x4--fwd_queue=0 --action=forward --match_vlan=1\n6. Tester traffic 을 인가한다.",
        "page": 179,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:44:44",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.4"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:44:44",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.4",
            "DIP": "100.1.1.3"
          }
        ]
      },
      {
        "Test case ID": "ACLKEY-003",
        "Description": "MAC” KEY 를 제공해야 하며, 매칭이 성공한 경우 지정된 Action 을\n수행해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. src-mac = 00:00:00:00:11:11 이며 action 이 drop 인 acl 을 설정한다.\n2. Tester traffic 을 인가한다.",
        "Sequence": "3. src-mac = 00:00:00:00:11:11 이며 action 이 forward 인 acl 을\n설정한다.\n4. Tester traffic 을 인가한다.\n1. src-mac = 00:00:00:00:11:11 이며 action 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=1 --src_mac=00:00:00:00:11:11 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=ff:ff:ff:ff:ff:ff --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n2. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT1  00:00:00:00:11:22  00:00:00:00:22:22  100.1.1.3  100.1.1.4",
        "Input": "T2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1\n3. src-mac = 00:00:00:00:11:11 이며 action 이 forward 인 acl 을\n설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:11:11 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=ff:ff:ff:ff:ff:ff --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0x4 --fwd_queue=0 --action=forward\n4. Tester traffic 을 인가한다.",
        "page": 181,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:22",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.4"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLKEY-004",
        "Description": "MAC” KEY 를 제공해야 하며, 매칭이 성공한 경우 지정된 Action 을\n수행해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. dst-mac = 00:00:00:00:22:22 이며 action 이 drop 인 acl 을 설정한다.\n2. Tester traffic 을 인가한다.",
        "Sequence": "3. dst-mac = 00:00:00:00:22:22 이며 action 이 forward 인 acl 을\n설정한다.\n4. Tester traffic 을 인가한다.\n1. dst-mac = 00:00:00:00:22:22 이며 action 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=1 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:22:22 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac= 00:00:00:00:00:00 --\nmask_dst_mac= ff:ff:ff:ff:ff:ff --mask_src_port=0 --mask_dst_port=0 --\nmask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n2. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT1  00:00:00:00:11:11  00:00:00:00:22:11  100.1.1.1  100.1.1.3",
        "Input": "T2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1\n3. dst-mac = 00:00:00:00:22:22 이며 action 이 forward 인 acl 을\n설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:22:22 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac= 00:00:00:00:00:00 --\nmask_dst_mac= ff:ff:ff:ff:ff:ff --mask_src_port=0 --mask_dst_port=0 --\nmask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0x4 --fwd_queue=0 --action=forward\n4. Tester traffic 을 인가한다.",
        "page": 183,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:11",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLKEY-005",
        "Description": "“SRC-PORT” Key 를 제공해야 하며, 매칭이 성공한 경우 지정된 Action 을\n수행해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. src-port = 5001 이며 action 이 drop 인 acl 을 설정한다.\n2. Tester traffic 을 인가한다.",
        "Sequence": "3. src-port = 5001 이며 action 이 forward 인 acl 을 설정한다.\n4. Tester traffic 을 인가한다.\n1. src-port = 5001 이며 action 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=1 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0x1389 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0xf --mask_dst_port=0 --\nmask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop --match_src_port=1\n2. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  sport  dport\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2  5000  6000\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.3  5001  6001\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.4  5002  6002",
        "Input": "T1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.5  5003  6003\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  7000  70000\n3. src-port = 5001 이며 action 이 forward 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0x1389 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0xf --mask_dst_port=0 --\nmask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0x4 --fwd_queue=0 --action=forward --match_src_port=1\n4. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  sport  dport",
        "page": 185,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.4"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.5"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLKEY-006",
        "Description": "위한 “DST-PORT” KEY 를 제공해야 하며, 매칭이 성공한 경우 지정된\nAction 을 수행해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. dst-port = 6000 이며 action 이 drop 인 acl 을 설정한다.\n2. Tester traffic 을 인가한다.",
        "Sequence": "3. dst-port = 6000 이며 action 이 drop 인 acl 을 설정한다.\n4. Tester traffic 을 인가한다.\n1. dst-port = 6000 이며 action 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0x1770 --eth_type=0\n--ip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0xf\n--mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop --match_src_port=0 --\nmatch_dst_port=1\n2. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  sport  dport\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2  5000  6000\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.3  5001  6001",
        "Input": "T1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.4  5002  6002\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100..1.1.5  5003  6003\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  6000  5000\n3. dst-port = 6000 이며 action 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0x1770 --eth_type=0\n--ip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0xf\n--mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0x4 --fwd_queue=0 --action=forward --match_src_port=0 -\n-match_dst_port=1",
        "page": 187,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.4"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100..1.1.5"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLKEY-007",
        "Description": "KEY 를 제공해야 하며, 매칭이 성공한 경우 지정된 Action 을 수행해야\n한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. ethtype = 0x0800 이며 action 이 drop 인 acl 을 설정한다.\n2. Tester traffic 을 인가한다.",
        "Sequence": "3. ethtype = 0x0800 이며 action 이 forward 인 acl 을 설정한다.\n4. Tester traffic 을 인가한다.\n1. ethtype = 0x0800 이며 action 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=1 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0x0800\n--ip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n2. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  Ethtype\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2  0800\nT1  00:00:00:00:11:11  00:00:00:00:22:22      86dd",
        "Input": "T2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  0800\n3. ethtype = 0x0800 이며 action 이 forward 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0x0 --dst_port=0 --\neth_type=0x0800 --ip_type=0 --l4_valid=0 --\nmask_src_mac=00:00:00:00:00:00 --mask_dst_mac=00:00:00:00:00:00 --\nmask_src_port=0 --mask_dst_port=0 --mask_vlan_id=0 --\nenable_port_range=0 --enable_vlan_range=0 --fwd_port_list=0x4 --\nfwd_queue=0 --action=forward\n4. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  Ethtype",
        "page": 189,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "",
            "DIP": ""
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLKEY-008",
        "Description": "- 0x01 : ICMP\n- 0x06 : TCP\n- 0x11 : UDP\n- etc",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. iptype = 0x11 이며 action 이 drop 인 acl 을 설정한다.\n2. Tester traffic 을 인가한다.",
        "Sequence": "3. iptype = 0x11 이며 action 이 forward 인 acl 을 설정한다.\n4. Tester traffic 을 인가한다.\n1. iptype = 0x11 이며 action 이 drop 인 acl 을 설정한다\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0x0 --dst_port=0 --eth_type=0 --\nip_type=0x11 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0 --fwd_queue=0 --action=drop\n2. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  protocol",
        "Input": "T1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2  Udp\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.3  100.1.1.4  icmp\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1\n3. iptype = 0x11 이며 action 이 forward 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0x0 --dst_port=0 --eth_type=0 --\nip_type=0x11 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --\nfwd_port_list=0x2 --fwd_queue=0 --action=forward",
        "page": 191,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.4"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLKEY-009",
        "Description": "제공해야 하며, 범위내 매칭이 성공한 경우 지정된 Action 을 수행해야\n한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. L4-RNG 가 key 이고 action 이 drop 인 acl 을 설정한다.\n2. Tester Port1 에 dst-port = 6000/6001/6002/6003 인 traffic 을\n생성한다.\n3. Tester traffic 을 인가한다.\n4. L4-RNG 가 key 이고 action 이 forward 인 acl 을 설정한다.\n5. Tester Port1 에 dst-port = 6000/6001/6002/6003 인 traffic 을",
        "Sequence": "생성한다.\n6. Tester traffic 을 인가한다.\n7. L4-RNG 가 key 이고 action 이 drop 인 acl 을 설정한다.\n8. Tester Port1 에 dst-port = 5000/5001/5002/5003 인 traffic 을\n생성한다.\n9. Tester traffic 을 인가한다.\n1. L4-RNG 가 key 이고 action 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0x1770 --eth_type=0\n--ip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --\nmask_dst_port=0x1772 --mask_vlan_id=0 --enable_port_range=1 --\nenable_vlan_range=0 --fwd_port_list=0 --fwd_queue=0 --action=drop --\nmatch_src_port=0 --match_dst_port=1",
        "Input": "2. Tester Port1 에 dst-port = 6000/6001/6002/6003 인 traffic 을\n생성한다.\nPort  SMAC  DMAC  SIP  DIP  Dport\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2  6000\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.3  6001\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.4  6002\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.5  6003",
        "page": 193,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.4"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.5"
          }
        ]
      },
      {
        "Test case ID": "ACLKEY-010",
        "Description": "매칭하기 위한 “VLAN-RNG” KEY 를 제공해야 하며, 범위내 매칭이\n성공한 경우 지정된 Action 을 수행해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. VLAN-RNG 가 key 이고 action 이 drop 인 acl 을 설정한다.(vlan-rng =\n10)\n2. Tester Port1 에 VLAN-rng = 10,11,12 인 traffic 을 생성한다.\n3. Tester traffic 을 인가한다.",
        "Sequence": "4. VLAN-RNG 가 key 이고 action 이 forward 인 acl 을 설정한다.(vlan-\nrng = 10)\n5. Tester Port1 에 VLAN-rng = 10,11 인 traffic 을 생성한다.\n6. Tester traffic 을 인가한다.\n1. VLAN-RNG 가 key 이고 action 이 drop 인 acl 을 설정한다.(vlan-rng =\n10)\ntc-tpa acl add --id=0 --iport=0 --vlan=10 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=11 --enable_port_range=0 --enable_vlan_range=1 --\nfwd_port_list=0 --fwd_queue=0 --action=drop --match_vlan=1\n2. Tester Port1 에 VLAN-rng = 10,11,12 인 traffic 을 생성한다.\nPort  SMAC  DMAC  SIP  DIP  Vid",
        "Input": "T1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2  10\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.3  11\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.4  12\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  10\n4. VLAN-RNG 가 key 이고 action 이 forward 인 acl 을 설정한다.(vlan-\nrng = 10)\ntc-tpa acl add --id=0 --iport=0 --vlan=10 --src_mac=00:00:00:00:00:00 --\ndst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --",
        "page": 196,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.4"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLKCY-011",
        "Description": "KEY 에 대한 복합 매칭 (Complex Matching)을 AND 조건으로 제공해야\n하며, 매칭이 성공한 경우 지정된 Action 을 수행해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. src-mac = 00:00:00:00:11:11 / dst-mac = 00:00:00:00:22:22 이며\naction 이 drop 인 acl 을 설정한다.",
        "Sequence": "2. Tester Port1,2 에 Add Raw Stream Block 를 수행하여 traffic 을\n생성한다.\n3. Tester traffic 을 인가한다.\n1. src-mac = 00:00:00:00:11:11 / dst-mac = 00:00:00:00:22:22 이며\naction 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0 --vlan=0 --src_mac=00:00:00:00:11:11 --\ndst_mac=00:00:00:00:22:22 --src_port=0x0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=ff:ff:ff:ff:ff:ff --mask_dst_mac=\nff:ff:ff:ff:ff:ff --mask_src_port=0 --mask_dst_port=0 --mask_vlan_id=0 --\nenable_port_range=0 --enable_vlan_range=0 --fwd_port_list=0 --\nfwd_queue=0 --action=drop",
        "Input": "2. Tester Port1,2 에 Add Raw Stream Block 를 수행하여 traffic 을\n생성한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT1  00:00:00:00:11:11  00:00:00:00:22:11  100.1.1.3  100.1.1.4\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1\n1.acl 이 올바르게 설정된다.\n3. src-mac = 00:00:00:00:11:11 / dst-mac = 00:00:00:00:22:22 인 traffic 이",
        "Expected Result": "drop 된다.\n3. src-mac = 00:00:00:00:11:11 / dst-mac = 00:00:00:00:22:11 인 traffic 이\ndrop 되지 않는다.",
        "page": 198,
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:11",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.4"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLACT-001",
        "Description": "성공한 경우 패킷을 폐기 (Discard) 해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. inport 가 0x3 이며 action 이 drop 인 acl 을 설정한다.",
        "Sequence": "2. Tester_1,2 을 emac1,2 로 인가한다.\n1. inport 가 0x3 이며 action 이 drop 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0x3 --vlan=0 --src_mac=00:00:00:00:00:00 -\n-dst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --",
        "Input": "fwd_port_list=0 --fwd_queue=0 --action=drop\n2. Tester 을 emac1,2 로 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1\n1. acl 이 올바르게 설정된다.",
        "Expected Result": "2. emac1,2 으로 인입되는 traffic 이 drop 된다.",
        "Test output": "FAIL",
        "Test result": "-. FreeRTOS 상 ACL 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 200,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLACT-002",
        "Description": "한다. Forwarding Port 는 패킷을 수신한 포를 제외한 하나 이상의\n포트를 지정할 수 있다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. inport 가 0x3 이며 action 이 forward 인 acl 을 설정한다.",
        "Sequence": "2. Tester_1,2 을 emac,1,2 로 인가한다.\n1. inport 가 0x3 이며 action 이 forward 인 acl 을 설정한다.\ntc-tpa acl add --id=0 --iport=0x3 --vlan=0 --src_mac=00:00:00:00:00:00 -\n-dst_mac=00:00:00:00:00:00 --src_port=0 --dst_port=0 --eth_type=0 --\nip_type=0 --l4_valid=0 --mask_src_mac=00:00:00:00:00:00 --\nmask_dst_mac=00:00:00:00:00:00 --mask_src_port=0 --mask_dst_port=0 -\n-mask_vlan_id=0 --enable_port_range=0 --enable_vlan_range=0 --",
        "Input": "fwd_port_list=0x4 --fwd_queue=0 --action=forward\n2. Tester_1,2 을 emac1,2 로 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1\n1.acl 이 올바르게 설정된다.",
        "Expected Result": "2. emac1,2 으로 인입되는 traffic 은 3 번포트로 forward 된다.",
        "Test output": "FAIL",
        "Test result": "-. FreeRTOS 상 ACL 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 201,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "ACLACT-003",
        "Description": "한다. 이때, Ingress QoS 블록에서 설정한 Egress Queue 의 값을 변경할\n수 있다 (Queue-0 ~ Queue-15).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. qos 를 port id 로 설정한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\n3. port4 -> tc5 -> queue3 로 설정한다.\n4. scheduling 를 pq 로 설정한다.",
        "Sequence": "5. Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6. traffic 을 100% 인가한다.\n7. port4 로 인입되는 패킷을 3 번이 아닌 queue 로 변경되는 acl 을\n설정한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535",
        "Input": "tc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3\n4. scheduling 를 pq 로 설정한다.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa write_reg --addr=2080F0 --data=0xf\n6. traffic 을 100% 인가한다.\nPort  SMAC  DMAC  SIP  DIP",
        "page": 202,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "ROGEN-001",
        "Description": "- Hash Space: 해시 값 충돌 없이 등록할 수 있는 Flow 테이블 (2048 개)\n- Collision Space: 해시 값 충돌 시 등록할 수 있는 Flow 테이블\n(2048 개)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1. emac1 에 static routing 을 설정한다.\n1. emac1 에 static routing 을 설정한다.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=7777 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=2 --meterID=0 --chg_VLAN_ID=10 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --",
        "Input": "dst_mac=88:88:88:88:87:88 --src_mac=00:01:02:03:04:05 --outPortNum=2\n--protocol=6 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=0",
        "Expected Result": "1.routing 이 올바르게 설정된다.\n1.routing 이 올바르게 설정된다.\n-. 고유한 hash 값을 가진다.",
        "Test output": "",
        "page": 204,
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "ROGEN-002",
        "Description": "엔트리는 Hash Space 에 등록되는 각 엔트리는 고유한 Hash 값을\n갖는다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1. emac1 에 static routing 을 설정한다.\n1. emac1 에 static routing 을 설정한다.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=7777 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=2 --meterID=0 --chg_VLAN_ID=10 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --",
        "Input": "dst_mac=88:88:88:88:87:88 --src_mac=00:01:02:03:04:05 --outPortNum=2\n--protocol=6 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=0",
        "Expected Result": "1.routing 이 올바르게 설정된다.\n1.routing 이 올바르게 설정된다.\n-. 고유한 hash 값을 가진다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 206,
        "Input_table": []
      },
      {
        "Test case ID": "ROGEN-003",
        "Description": "- 5-Tuple + {Ingress Port 번호} – {소스 IP 주소, 소스 Port 번호} +\n{CRC_Src_Port}기반 Hash\n참고.\n- CRC_Init = 0x0FFFFFFF\n- CRC_Zero_Init = nextCRC32_D32({0x0000, 소스 Port 번호}, CRC_Init)\n- CRC_Src_Init = nextCRC32_D32(src_ipaddr_crc, CRC_Init)\n- CRC_Src_Port = nextCRC32_D32( (src_ipaddr_crc ^ 소스 Port 번호),\nCRC_Init)\n다항식 =\nx32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x1+1",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1. emac1 에 vlan10 을 추가하는 static routing 을 설정한다.\n1.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=7777 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=2 --meterID=0 --chg_VLAN_ID=10 --chg_dport=0 --",
        "Input": "chg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --\ndst_mac=88:88:88:88:87:88 --src_mac=00:01:02:03:04:05 --outPortNum=2\n--protocol=6 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=0 --",
        "page": 207,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "ROGEN-004",
        "Description": "- 디폴트: 정적 엔트리 등록/삭제\n- 정적 기능만 사용",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1 에 static routing 을 설정한다.",
        "Sequence": "2. 추가한 routing 을 조회한다.\n3. 추가한 routing 을 삭제한다.\n1. emac1 에 static routing 을 설정한다.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=5555 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=7777 --chg_src_ip=10.10.10.8 --dst_mac=\n00:01:02:01:04:ef --src_mac=00:01:02:03:04:05 --outPortNum=2 --\nprotocol=17 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=1 --",
        "Input": "fa_CHG_SPORT=1 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=1 --set_DIR=1\n2. 추가한 routing 을 조회한다.\ntc-tpa static_route show –all\n3. 추가한 routing 을 삭제한다.\ntc-tpa static_route del --id=203\n2.routing 이 올바르게 조회된다.",
        "Expected Result": "3.rounting 이 올바르게 삭제된다.",
        "Test output": "2. routing 이 올바르게 조회된다.",
        "page": 209,
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "ROACT-001",
        "Description": "Port 로 송신 시 VLAN 태그를 추가할 수 있어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 vlan10 을 추가하는 static routing 을 설정한다.",
        "Sequence": "2. Tester traffic 을 인가한다.\n1. emac1,2 에 vlan10 을 추가하는 static routing 을 설정한다.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=7777 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=2 --meterID=0 --chg_VLAN_ID=10 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --\ndst_mac=88:88:88:88:87:88 --src_mac=00:01:02:03:04:05 --outPortNum=2\n--protocol=6 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=0\n1. emac1,2 에 vlan10 을 추가하는 static routing 을 설정한다.\ntc-tpa static_route add --src_ip=10.10.10.10 --src_port=5201 --",
        "Input": "dst_ip=10.10.20.9 --dst_port=7777 --inPortNum=2 --ind_ipv6=0 --\nmatch_flag=2 --meterID=0 --chg_VLAN_ID=10 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --\ndst_mac=dc:a6:32:79:1f:53 --src_mac=00:01:02:03:04:05 --outPortNum=1\n--protocol=6 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=0\n2. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  Sport  dport\nT1  DC:A6:32:79:1F:53  00:01:02:03:04:05  10.10.20.9  10.10.10.10  7777  5201\nT3  88:88:88:88:87:88  00:01:02:03:04:05  10.10.10.10  10.10.20.9  5201  7777",
        "Expected Result": "2.vlan10 을 추가하여 올바르게 routing 된다.",
        "page": 211,
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "DC:A6:32:79:1F:53",
            "DMAC": "00:01:02:03:04:05",
            "SIP": "10.10.20.9",
            "DIP": "10.10.10.10"
          },
          {
            "Port": "T3",
            "SMAC": "88:88:88:88:87:88",
            "DMAC": "00:01:02:03:04:05",
            "SIP": "10.10.10.10",
            "DIP": "10.10.20.9"
          }
        ]
      },
      {
        "Test case ID": "ROACT-002",
        "Description": "오직 Outer VLAN 태그를 수정할 수 있어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 outer vlan 을 30 으로 변경하는 static routing 을 설정한다.",
        "Sequence": "2. Tester traffic 을 인가한다.\n1. emac1,2 에 outer vlan 을 30 으로 변경하는 static routing 을 설정한다.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=7777 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=2 --meterID=0 --chg_VLAN_ID=30 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --\ndst_mac=88:88:88:88:87:88 --src_mac=00:01:02:03:04:05 --outPortNum=2\n--protocol=6 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=0\n1. emac1,2 에 outer vlan 을 30 으로 변경하는 static routing 을 설정한다.\ntc-tpa static_route add --src_ip=10.10.10.10 --src_port=5201 --",
        "Input": "dst_ip=10.10.20.9 --dst_port=7777 --inPortNum=2 --ind_ipv6=0 --\nmatch_flag=2 --meterID=0 --chg_VLAN_ID=30 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --\ndst_mac=dc:a6:32:79:1f:53 --src_mac=00:01:02:03:04:05 --outPortNum=1 -\n-protocol=6 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=0\n2. Tester traffic 을 인가한다.\nPort  SMAC  DMAC  Vid  SIP  DIP  Sport  dport\nT1  DC:A6:32:79:1F:53  00:01:02:03:04:05  10/20  10.10.20.9  10.10.10.10  7777  5201\nT3  00:01:02:03:04:05  88:88:88:88:87:88  10/20  10.10.10.10  10.10.20.9  5201  7777",
        "Expected Result": "2.vlan10(outer vlan)이 vlan30 으로 변경되어 routing 된다.\n2.vlan10(outer vlan)이 vlan30 으로 변경되어 routing 된다.",
        "Test output": "-. T3 -> T1 에서 T1 캡처",
        "page": 213,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "DC:A6:32:79:1F:53",
            "DMAC": "00:01:02:03:04:05",
            "SIP": "10.10.20.9",
            "DIP": "10.10.10.10"
          },
          {
            "Port": "T3",
            "SMAC": "00:01:02:03:04:05",
            "DMAC": "88:88:88:88:87:88",
            "SIP": "10.10.10.10",
            "DIP": "10.10.20.9"
          }
        ]
      },
      {
        "Test case ID": "ROACT-003",
        "Description": "수 있어야 한다. 수신 패킷의 TTL 값이 1 인 경우 패킷을 폐기해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 ttl decrement 인 static routing 을 설정한다.",
        "Sequence": "2. TTL 이 255 인 Tester traffic 을 인가한다.\n3. TTL 이 1 인 Tester traffic 을 인가한다.\n1.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=7777 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=2 --meterID=0 --chg_VLAN_ID=10 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --\ndst_mac=88:88:88:88:87:88 --src_mac=00:01:02:03:04:05 --outPortNum=2\n--protocol=6 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=0\n1.\ntc-tpa static_route add --src_ip=10.10.10.10 --src_port=5201 --\ndst_ip=10.10.20.9 --dst_port=7777 --inPortNum=2 --ind_ipv6=0 --",
        "Input": "match_flag=2 --meterID=0 --chg_VLAN_ID=10 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --\ndst_mac=dc:a6:32:79:1f:53 --src_mac=00:01:02:03:04:05 --outPortNum=1\n--protocol=6 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=0\n2.\nPort  SMAC  DMAC  ttl  SIP  DIP  Sport  dport\nT1  DC:A6:32:79:1F:53  00:01:02:03:04:05  255  10.10.20.9  10.10.10.10  7777  5201\nT3  00:01:02:03:04:05  88:88:88:88:87:88  255  10.10.10.10  10.10.20.9  5201  7777\n3.",
        "page": 215,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "DC:A6:32:79:1F:53",
            "DMAC": "00:01:02:03:04:05",
            "SIP": "10.10.20.9",
            "DIP": "10.10.10.10"
          },
          {
            "Port": "T3",
            "SMAC": "00:01:02:03:04:05",
            "DMAC": "88:88:88:88:87:88",
            "SIP": "10.10.10.10",
            "DIP": "10.10.20.9"
          }
        ]
      },
      {
        "Test case ID": "ROACT-004",
        "Description": "Layer-3\n◼  소스 IPv4/IPv6 주소, 목적지 IPv4/IPv6 주소\nLayer-4\n◼  소스 Port 번호, 목적지 Port 번호",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 static routing(nat)을 설정한다.",
        "Sequence": "2.c1 traffic 을 인가한다.\n1.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=5555 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=7777 --chg_src_ip=10.10.10.8 --dst_mac=\n00:01:02:01:04:ef --src_mac=00:01:02:03:04:05 --outPortNum=2 --\nprotocol=17 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=1 --\nfa_CHG_SPORT=1 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=1 --set_DIR=1",
        "Input": "1.\ntc-tpa static_route add --src_ip=10.10.10.10 --src_port=5201 --\ndst_ip=10.10.10.8 --dst_port=7777 --inPortNum=2 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=5555 --\nchg_dst_ip=10.10.20.9 --chg_sport=0 --chg_src_ip=0.0.0.0 --dst_mac=\ndc:a6:32:79:1f:53 --src_mac=00:01:02:03:04:05 --outPortNum=1 --\nprotocol=17 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=1 --fa_CHG_DPORT=1 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=1 --set_DIR=2\n2.",
        "page": 217,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "RONAT-001",
        "Description": "주소를 변경할 수 있어야 한다. 송신 방향 (Origin: In-Vehicle →\nExternal)과 수신 방향 (Reply: External → In-Vehicle)에 대해 각각 설정이\n가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 static routing(nat)을 설정한다.",
        "Sequence": "2.c1 traffic 을 인가한다.\n1.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=5555 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=7777 --chg_src_ip=10.10.10.8 --dst_mac=\n00:01:02:01:04:ef --src_mac=00:01:02:03:04:05 --outPortNum=2 --\nprotocol=17 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=1 --\nfa_CHG_SPORT=1 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=1 --set_DIR=1",
        "Input": "1.\ntc-tpa static_route add --src_ip=10.10.10.10 --src_port=5201 --\ndst_ip=10.10.10.8 --dst_port=7777 --inPortNum=2 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=5555 --\nchg_dst_ip=10.10.20.9 --chg_sport=0 --chg_src_ip=0.0.0.0 --dst_mac=\ndc:a6:32:79:1f:53 --src_mac=00:01:02:03:04:05 --outPortNum=1 --\nprotocol=17 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=1 --fa_CHG_DPORT=1 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=1 --set_DIR=2\n2.",
        "page": 219,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "RONAT-002",
        "Description": "",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 static routing(nat)을 설정한다.",
        "Sequence": "2.c1 traffic 을 인가한다.\n1.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=5555 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=7777 --chg_src_ip=10.10.10.8 --dst_mac=\n00:01:02:01:04:ef --src_mac=00:01:02:03:04:05 --outPortNum=2 --\nprotocol=17 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=1 --",
        "Input": "fa_CHG_SPORT=1 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=1 --set_DIR=1\n1.\ntc-tpa static_route add --src_ip=10.10.10.10 --src_port=5201 --\ndst_ip=10.10.10.8 --dst_port=7777 --inPortNum=2 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=5555 --\nchg_dst_ip=10.10.20.9 --chg_sport=0 --chg_src_ip=0.0.0.0 --dst_mac=\ndc:a6:32:79:1f:53 --src_mac=00:01:02:03:04:05 --outPortNum=1 --",
        "page": 221,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "RONAT-003",
        "Description": "주소를 변경할 수 있어야 한다. 송신 방향 (Origin: External → In-\nVehicle)과 응답 방향 (Reply: In-Vehicle → External)에 대해 각각 설정이\n가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 static routing(nat)을 설정한다.",
        "Sequence": "2.c1 traffic 을 인가한다.\n1.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=5555 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=7777 --chg_src_ip=10.10.10.8 --dst_mac=\n00:01:02:01:04:ef --src_mac=00:01:02:03:04:05 --outPortNum=2 --\nprotocol=17 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=1 --\nfa_CHG_SPORT=1 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=1 --set_DIR=1\n1.\ntc-tpa static_route add --src_ip=10.10.10.10 --src_port=5201 --",
        "Input": "dst_ip=10.10.10.8 --dst_port=7777 --inPortNum=2 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=5555 --\nchg_dst_ip=10.10.20.9 --chg_sport=0 --chg_src_ip=0.0.0.0 --dst_mac=\ndc:a6:32:79:1f:53 --src_mac=00:01:02:03:04:05 --outPortNum=1 --\nprotocol=17 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=1 --fa_CHG_DPORT=1 --fa_CHG_SIP_ADDR=0 --\nfa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=1 --set_DIR=2\n2.\nPort  SMAC  DMAC  SIP  DIP  Sport  dport\nT1  DC:A6:32:79:1F:53  00:01:02:03:04:05  10.10.20.9  10.10.10.10  5555  5201\nT3  00:01:02:01:04:EF  00:01:02:03:04:05  10.10.10.10.  10.10.10.8  5201  7777",
        "page": 223,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "DC:A6:32:79:1F:53",
            "DMAC": "00:01:02:03:04:05",
            "SIP": "10.10.20.9",
            "DIP": "10.10.10.10"
          },
          {
            "Port": "T3",
            "SMAC": "00:01:02:01:04:EF",
            "DMAC": "00:01:02:03:04:05",
            "SIP": "10.10.10.10.",
            "DIP": "10.10.10.8"
          }
        ]
      },
      {
        "Test case ID": "RONAT-004",
        "Description": "",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 static routing(nat)을 설정한다.",
        "Sequence": "2.c1 traffic 을 인가한다.\n1.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=5555 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=7777 --chg_src_ip=10.10.10.8 --dst_mac=\n00:01:02:01:04:ef --src_mac=00:01:02:03:04:05 --outPortNum=2 --\nprotocol=17 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=1 --\nfa_CHG_SPORT=1 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --",
        "Input": "set_NAT=1 --set_DIR=1\n1.\ntc-tpa static_route add --src_ip=10.10.10.10 --src_port=5201 --\ndst_ip=10.10.10.8 --dst_port=7777 --inPortNum=2 --ind_ipv6=0 --\nmatch_flag=1 --meterID=0 --chg_VLAN_ID=20 --chg_dport=5555 --\nchg_dst_ip=10.10.20.9 --chg_sport=0 --chg_src_ip=0.0.0.0 --dst_mac=\ndc:a6:32:79:1f:53 --src_mac=00:01:02:03:04:05 --outPortNum=1 --\nprotocol=17 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --",
        "page": 225,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "ROGW-001",
        "Description": "",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1,2 에 vlan10 을 추가하는 static routing 을 설정한다.",
        "Sequence": "2.Tester traffic 을 인가한다.\n1.\ntc-tpa static_route add --src_ip=10.10.20.9 --src_port=7777 --\ndst_ip=10.10.10.10 --dst_port=5201 --inPortNum=1 --ind_ipv6=0 --\nmatch_flag=2 --meterID=0 --chg_VLAN_ID=10 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --\ndst_mac=88:88:88:88:87:88 --src_mac=00:01:02:03:04:05 --outPortNum=2\n--protocol=6 --fa_ADD_ETH_HDR=1 --fa_ADD_VLAN_HDR=1 --\nfa_CHG_DIP_ADDR=0 --fa_CHG_DPORT=0 --fa_CHG_SIP_ADDR=0 --",
        "Input": "fa_CHG_SPORT=0 --fa_IPSEC_FLOW=0 --fa_SET_TTL_DECREMENT=1 --\nset_NAT=0\n1.\ntc-tpa static_route add --src_ip=10.10.10.10 --src_port=5201 --\ndst_ip=10.10.20.9 --dst_port=7777 --inPortNum=2 --ind_ipv6=0 --\nmatch_flag=2 --meterID=0 --chg_VLAN_ID=10 --chg_dport=0 --\nchg_dst_ip=0.0.0.0 --chg_sport=0 --chg_src_ip=0.0.0.0 --",
        "page": 227,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "IQGEN-001",
        "Description": "TPA 는 Ingress QoS HW 블록에 대한 활성화되어야 한다.",
        "Test Environment": "",
        "Test Method": "REVIEW",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "page": 229,
        "Input_table": []
      },
      {
        "Test case ID": "IQGEN-002",
        "Description": "활성화/비활성화가 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1 -> emac2 로 100% traffic 을 송신한다.",
        "Sequence": "2. bps 단위로 200M shaper 롤 설정한다.\n1. emac1 -> emac2 로 100% traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2",
        "Input": "2. bps 단위로 200M shaper 롤 설정한다.\ntc-tpa ingqos_shp_config shp_cfg --emac=1 --ifg=12 --shp0_mode=0 --\nshp0_rate=0 --shp1_mode=0 --shp1_rate=0\ntc-tpa ingqos_shp_config shp_ctrl --emac=1 --shp_en=1 --shp_no=0 --\nclk_div=0 --max_credit=0x3fffff --min_credit=0xc13ca --idleslope=400",
        "Expected Result": "2.1G 에서 200M 올바르게 shaping 된다.\n2.1G 에서 200M 올바르게 shaping 된다.",
        "Test output": "PASS",
        "Test result": "-. 장비부팅 시 shaper 비활성화, shaper enable 시 shaper 활성화",
        "page": 230,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "IQGEN-003",
        "Description": "Ingress QoS Function Block",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.flow table 128 개를 설정한다.",
        "Sequence": "2.flow table 을 조회한다.\n3.flow table 을 삭제한다.\n1. flow table 128 개를 설정한다.\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=0 --multicast_frame_indicator=0 --\nbroadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.10.0 --\ndst_ip_addr=0.0.0.0 --l4_max_src_port=0 --l4_min_src_port=0 --\nl4_max_dst_port=0 --l4_min_dst_port=0 --valid_entry_indicator=1 --\nm_parse_type=0 --m_multicast_frame_indicator=0 --",
        "Input": "m_broadcast_frame_indicator=0 --m_parse_vlan_type=0 --m_vlan=0 --\nm_type_of_service=0 --m_protocol_next_label=0 --m_src_ip_addr=32 --\nm_dst_ip_addr=32 --m_l4_src_port=0 --m_l4_dst_port=0 --\ning_qos_action=1\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=1 --\nparse_type=0 --multicast_frame_indicator=0 --\nbroadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.10.1 --",
        "page": 231,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "IQFMGMT-001",
        "Description": "수 있는 Flow Table 을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. flow table 을 설정한다.",
        "Sequence": "2. flow table 을 확인한다.\n1. flow table 을 설정한다.\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=0 --multicast_frame_indicator=0 --",
        "Input": "broadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.10.0 --\ndst_ip_addr=0.0.0.0 --l4_max_src_port=0 --l4_min_src_port=0 --",
        "page": 234,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "IQFMGMT-002",
        "Description": "조회 및 삭제가 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.flow table 128 개를 설정한다.",
        "Sequence": "2.flow table 을 조회한다.\n3.flow table 을 삭제한다.\n1. flow table 128 개를 설정한다.\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=0 --multicast_frame_indicator=0 --\nbroadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.10.0 --\ndst_ip_addr=0.0.0.0 --l4_max_src_port=0 --l4_min_src_port=0 --\nl4_max_dst_port=0 --l4_min_dst_port=0 --valid_entry_indicator=1 --\nm_parse_type=0 --m_multicast_frame_indicator=0 --\nm_broadcast_frame_indicator=0 --m_parse_vlan_type=0 --m_vlan=0 --\nm_type_of_service=0 --m_protocol_next_label=0 --m_src_ip_addr=32 --\nm_dst_ip_addr=32 --m_l4_src_port=0 --m_l4_dst_port=0 --\ning_qos_action=1",
        "Input": "tc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=1 --\nparse_type=0 --multicast_frame_indicator=0 --\nbroadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.10.1 --\ndst_ip_addr=0.0.0.0 --l4_max_src_port=0 --l4_min_src_port=0 --\nl4_max_dst_port=0 --l4_min_dst_port=0 --valid_entry_indicator=1 --\nm_parse_type=0 --m_multicast_frame_indicator=0 --\nm_broadcast_frame_indicator=0 --m_parse_vlan_type=0 --m_vlan=0 --\nm_type_of_service=0 --m_protocol_next_label=0 --m_src_ip_addr=32 --\nm_dst_ip_addr=32 --m_l4_src_port=0 --m_l4_dst_port=0 --\ning_qos_action=1\n------------------------------------중략---------------------------------------",
        "page": 236,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "IQFMGMT-003 -[untagged]",
        "Description": "Flow Table 에 Flow Entry 가 등록된 경우, TPA 는 수신 프레임에 대해\nFlow Table Lookup 을 수행한다. 이때 Flow 가 Matching 되지 않는 경우,\n해당 프레임은 ‘Unmanaged’ 타입으로 분류된다. Flow 가 Matching 된\n경우, Flow Entry 에 지정된 Action 에 따라 처리된다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.TPA 에 flow table 을 설정하지 않는다.\n2.Tester_1 -> emac1 traffic 을 송신한다.\n3. TPA 에 ingqos src-ip = 192.168.10.0 / dst-ip=192.168.10.200 drop 을\n설정한다.",
        "Sequence": "4. Tester_1 -> emac1 traffic 을 송신한다.\n5. TPA 에 ingqos src-ip = 192.168.10.0 / dst-ip=192.168.10.200\nreserved 을 설정한다.\n6. Tester_1 -> emac1 traffic 을 송신한다.\n2. Tester_1 -> emac1 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200  1\n3. TPA 에 ingqos src-ip = 192.168.10.0 / dst-ip=192.168.10.200 drop 을\n설정한다.\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=0 --multicast_frame_indicator=0 --",
        "Input": "broadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.10.0 --\ndst_ip_addr=192.168.10.200 --l4_max_src_port=0 --l4_min_src_port=0 --\nl4_max_dst_port=0 --l4_min_dst_port=0 --valid_entry_indicator=1 --\nm_parse_type=0 --m_multicast_frame_indicator=0 --\nm_broadcast_frame_indicator=0 --m_parse_vlan_type=0 --m_vlan=0 --\nm_type_of_service=0 --m_protocol_next_label=0 --m_src_ip_addr=31 --\nm_dst_ip_addr=31 --m_l4_src_port=0 --m_l4_dst_port=0 --\ning_qos_action=1",
        "page": 239,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          }
        ]
      },
      {
        "Test case ID": "IQFMGMT-004-[untagged]",
        "Description": "수용할 수 있는 Option 을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.TPA 에 flow table 을 설정하지 않는다.\n2.Tester_1 -> emac1 traffic 을 송신한다.\n3. TPA 에 ingqos src-ip = 192.168.10.0 / dst-ip=192.168.10.200 drop 을\n설정한다.",
        "Sequence": "4. Tester_1 -> emac1 traffic 을 송신한다.\n5. TPA 에 ingqos src-ip = 192.168.10.0 / dst-ip=192.168.10.200\nreserved 을 설정한다.\n6. Tester_1 -> emac1 traffic 을 송신한다.\n2. Tester_1 -> emac1 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200  1\n3. TPA 에 ingqos src-ip = 192.168.10.0 / dst-ip=192.168.10.200 drop 을\n설정한다.\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=0 --multicast_frame_indicator=0 --\nbroadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.10.0 --\ndst_ip_addr=192.168.10.200 --l4_max_src_port=0 --l4_min_src_port=0 --",
        "Input": "l4_max_dst_port=0 --l4_min_dst_port=0 --valid_entry_indicator=1 --\nm_parse_type=0 --m_multicast_frame_indicator=0 --\nm_broadcast_frame_indicator=0 --m_parse_vlan_type=0 --m_vlan=0 --\nm_type_of_service=0 --m_protocol_next_label=0 --m_src_ip_addr=31 --\nm_dst_ip_addr=31 --m_l4_src_port=0 --m_l4_dst_port=0 --\ning_qos_action=1\n4. Tester_1 -> emac1 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200  1",
        "page": 242,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          }
        ]
      },
      {
        "Test case ID": "IQFMGMT-005-[untagged]",
        "Description": "‘Reserved’ 속성으로 처리할 수 있는 Option 을 제공해야 한다 (참고.\nMatching 된 Flow 의 기본 속성은 ‘Managed’로 처리).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. TPA 에 src-ip = 192.168.100 / dst-ip=192.168.10.200 을 reserve 을",
        "Sequence": "설정한다.\n2. Tester_1 -> emac1 traffic 을 송신한다.\n1. TPA 에 src-ip = 192.168.100 / dst-ip=192.168.10.200 을 reserve 을\n설정한다.\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=0 --multicast_frame_indicator=0 --\nbroadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.10.0 --\ndst_ip_addr=192.168.10.200 --l4_max_src_port=0 --l4_min_src_port=0 --\nl4_max_dst_port=0 --l4_min_dst_port=0 --valid_entry_indicator=1 --",
        "Input": "m_parse_type=0 --m_multicast_frame_indicator=0 --\nm_broadcast_frame_indicator=0 --m_parse_vlan_type=0 --m_vlan=0 --\nm_type_of_service=0 --m_protocol_next_label=0 --m_src_ip_addr=31 --\nm_dst_ip_addr=31 --m_l4_src_port=0 --m_l4_dst_port=0 --\ning_qos_action=2\n2. Tester_1 -> emac1 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200",
        "Expected Result": "2.TPA 로 수신된 traffic 이 reserve 된다.\n4.TPA 로 수신된 traffic 이 reserve 된다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 245,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          }
        ]
      },
      {
        "Test case ID": "IQFMGMT-006-[untagged]",
        "Description": "Matching 시 ‘Managed’ 속성으로, Unmatching 사 ‘Unmanaged’\n속성으로 분류하여 처리해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.TPA 에 flow table 을 설정하지 않는다.(unmanaged)\n2.Tester_1 -> emac1 traffic 을 송신한다.",
        "Sequence": "3. TPA 에 src-ip = 192.168.100 / dst-ip=192.168.10.200 을 drop 을\n설정한다.(managed)\n4. Tester_1 -> emac1 traffic 을 송신한다.\n2. Tester_1 -> emac1 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200\n3. TPA 에 src-ip = 192.168.100 / dst-ip=192.168.10.200 을 drop 을\n설정한다.(managed)\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=0 --multicast_frame_indicator=0 --\nbroadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.10.0 --",
        "Input": "dst_ip_addr=192.168.10.200 --l4_max_src_port=0 --l4_min_src_port=0 --\nl4_max_dst_port=0 --l4_min_dst_port=0 --valid_entry_indicator=1 --\nm_parse_type=0 --m_multicast_frame_indicator=0 --\nm_broadcast_frame_indicator=0 --m_parse_vlan_type=0 --m_vlan=0 --\nm_type_of_service=0 --m_protocol_next_label=0 --m_src_ip_addr=31 --\nm_dst_ip_addr=31 --m_l4_src_port=0 --m_l4_dst_port=0 --\ning_qos_action=2\n4. Tester_1 -> emac1 traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200  1\n2.TPA 로 수신된 traffic 이 unmanaged 로 출력된다.",
        "Expected Result": "4.TPA 로 수신된 traffic 이 drop 된다.",
        "Test output": "2.TPA 로 수신된 traffic 이 unmanaged 로 출력된다.",
        "page": 246,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          }
        ]
      },
      {
        "Test case ID": "IQFMGMT-007",
        "Description": "- VLAN_TYPE: 수신 프레임이 IEEE802.1Q VLAN 태그를 가지는 경우\nMatching.\n- Multicast: 수신 프레임이 Multicast 프레임인 경우 Matching. (구현 후\n시험중)\n- Broadcast: 수신 프레임이 Broadcast 프레임인 경우 Matching. (구현 후\n시험중)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. TPA 에 frame 유형 : ethernet / action : drop 을 설정한다.\n2. Tester_1 -> emac1 traffic 을 송신한다.\n3. TPA 에 frame 유형 : arp / action : drop 을 설정한다.\n4. Tester_1 -> emac1 traffic 을 송신한다.\n5. TPA 에 frame 유형 : ipv4 / action : drop 을 설정한다.\n6. Tester_1 -> emac1 traffic 을 송신한다.\n7. TPA 에 frame 유형 : ipv6 / action : drop 을 설정한다.",
        "Sequence": "8. Tester_1 -> emac1 traffic 을 송신한다.\n9. TPA 에 frame 유형 : vlan_type / action : drop 을 설정한다.\n10. Tester_1 -> emac1 traffic 을 송신한다.\n11. TPA 에 frame 유형 : multicast / action : drop 을 설정한다.\n12. Tester_1 -> emac1 traffic 을 송신한다.\n13. TPA 에 frame 유형 : broadcast / action : drop 을 설정한다.\n14. Tester_1 -> emac1 traffic 을 송신한다.\n1. TPA 에 frame 유형 : ethernet / action : drop 을 설정한다.\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=1 --multicast_frame_indicator=0 --",
        "Input": "broadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.0.100 --\ndst_ip_addr=192.168.0.10 --l4_max_src_port=0 --l4_min_src_port=0 --\nl4_max_dst_port=0 --l4_min_dst_port=0 --valid_entry_indicator=1 --",
        "page": 248,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "IQFMGMT-008",
        "Description": "- IPv4 Destination 주소: 수신된 IPv4 패킷의 목적지 IP 주소 값이\n일치하는 경우 Matching.\n- IPv6 Source 주소: 수신된 IPv6 패킷의 소스 IP 주소 값이 일치하는\n경우 Matching. (구현예정)\n- IPv6 Destination 주소: 수신된 IPv6 패킷의 목적지 IP 주소 값이\n일치하는 경우 Matching. (구현예정)\n- Source Port: 수신된 IPv4/IPv6 패킷의 Layer-4 소스 Port 값이\n일치하는 경우 Matching.\n- Destination Port: 수신된 IPv4/IPv6 패킷의 Layer-4 목적지 Port 값이\n일치하는 경우 Matching.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. TPA 에 vid : 10 / action : drop 을 설정한다.\n2. Tester_1 -> emac1 traffic 을 송신한다.\n3. TPA 에 tos : 32 / action : drop 을 설정한다.\n4. Tester_1 -> emac1 traffic 을 송신한다.\n5. TPA 에 traffic class : 32 / action : drop 을 설정한다.\n6. Tester_1 -> emac1 traffic 을 송신한다.\n7. TPA 에 src-ip : 192.168.10.100 / action : drop 을 설정한다.",
        "Sequence": "8. Tester_1 -> emac1 traffic 을 송신한다.\n9. TPA 에 dst-ip : 192.168.0.10 / action : drop 을 설정한다.\n10. Tester_1 -> emac1 traffic 을 송신한다.\n11. TPA 에 ipv6 src-ip : 1 / action : drop 을 설정한다.\n12. Tester_1 -> emac1 traffic 을 송신한다.\n13. TPA 에 ipv6 dst-ip : 1 / action : drop 을 설정한다.\n14. Tester_1 -> emac1 traffic 을 송신한다.",
        "page": 254,
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "IQFMGMT-009",
        "Description": "지정된 범위 내에 해당하는 경우 Matching 할 수 있어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. TPA 에 src-port range : 5000-5002 / action : drop 을 설정한다.\n2. Tester_1 -> emac1 traffic 을 송신한다.",
        "Sequence": "3. TPA 에 dst-port range : 6000-6002 / action : drop 을 설정한다.\n4. Tester_1 -> emac1 traffic 을 송신한다.\n1.\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=8 --multicast_frame_indicator=0 --\nbroadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=17 --src_ip_addr=192.168.0.100\n--dst_ip_addr=192.168.0.10 --l4_max_src_port=0x138a --\nl4_min_src_port=0x1388 --l4_max_dst_port=0 --l4_min_dst_port=0 --\nvalid_entry_indicator=1 --m_parse_type=8 --\nm_multicast_frame_indicator=0 --m_broadcast_frame_indicator=0 --\nm_parse_vlan_type=0 --m_vlan=0 --m_type_of_service=0 --\nm_protocol_next_label=17 --m_src_ip_addr=32 --m_dst_ip_addr=32 --\nm_l4_src_port=1 --m_l4_dst_port=0 --ing_qos_action=1",
        "Input": "2.\nPort  SMAC  DMAC  SIP  DIP  Sport\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.0.100  192.168.0.10  5000\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.0.100  192.168.0.10  5001\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.0.100  192.168.0.10  5002\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.0.100  192.168.0.10  5003\n3.\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=8 --multicast_frame_indicator=0 --\nbroadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=17 --src_ip_addr=192.168.0.100\n--dst_ip_addr=192.168.0.10 --l4_max_src_port=0 --l4_min_src_port=0 --\nl4_max_dst_port=0x1772 --l4_min_dst_port=0x1770 --",
        "page": 260,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.0.100",
            "DIP": "192.168.0.10"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.0.100",
            "DIP": "192.168.0.10"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.0.100",
            "DIP": "192.168.0.10"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.0.100",
            "DIP": "192.168.0.10"
          }
        ]
      },
      {
        "Test case ID": "IQFMGMT-010-[untagged]",
        "Description": "설정 기능을 제공해야 한다. (참고. Ranged Matching 의 경우 지정된\n범위 내의 모든 값에 대해 동일한 Mask 적용).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. TPA 에 src_ip_addr=192.168.10.0 / m_src_ip_addr=7 을 설정한다.",
        "Sequence": "2. Tester_1 -> emac1 traffic 을 송신한다.\n1.\ntc-tpa set_ingqos_conf --ing_qos_port=1 --ing_port_index=0 --\nparse_type=0 --multicast_frame_indicator=0 --\nbroadcast_frame_indicator=0 --parse_vlan_type=0 --vlan=0 --\ntype_of_service=0 --protocol_next_label=0 --src_ip_addr=192.168.10.0 --\ndst_ip_addr=0.0.0.0 --l4_max_src_port=0 --l4_min_src_port=0 --\nl4_max_dst_port=0 --l4_min_dst_port=0 --valid_entry_indicator=1 --\nm_parse_type=0 --m_multicast_frame_indicator=0 --",
        "Input": "m_broadcast_frame_indicator=0 --m_parse_vlan_type=0 --m_vlan=0 --\nm_type_of_service=0 --m_protocol_next_label=0 --m_src_ip_addr=7 --\nm_dst_ip_addr=32 --m_l4_src_port=0 --m_l4_dst_port=0 --\ning_qos_action=1\n2.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.1.1.1.1  192.168.10.200",
        "Expected Result": "2. traffic 이 올바르게 drop 된다.\n2. traffic 이 올바르게 drop 된다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 262,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.1.1.1.1",
            "DIP": "192.168.10.200"
          }
        ]
      },
      {
        "Test case ID": "IQPOL-001",
        "Description": "- 활성화: WRED 및 Shaper 활성화\n- 비활성화: WRED 및 Shaper 비활성화",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NT",
        "Test result": "-. ingqos buffer 를 채울 수 있는 시험환경구성 구성중",
        "page": 263,
        "Input_table": []
      },
      {
        "Test case ID": "IQWRED-001",
        "Description": "가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.LMEM 에 대한 설정을 한다.",
        "Sequence": "2.DMEM 에 대한 설정을 한다.\n3.RXF 에 대한 설정을 한다.\n1.\ntc-tpa ingqos_wred_conf qos_reg --emac=1 --dmem_queue_avg_ctr=0 --\ndmem_queue_wred_en=0 --lmem_queue_avg_ctr=1 --\nlmem_queue_wred_en=1 --rxf_queue_avg_ctr=0 --rxf_queue_wred_en=0\n2.\ntc-tpa ingqos_wred_conf qos_reg --emac=1 --dmem_queue_avg_ctr=1 --",
        "Input": "dmem_queue_wred_en=1 --lmem_queue_avg_ctr=0 --\nlmem_queue_wred_en=0 --rxf_queue_avg_ctr=0 --rxf_queue_wred_en=0\n3.\ntc-tpa ingqos_wred_conf qos_reg --emac=1 --dmem_queue_avg_ctr=0 --\ndmem_queue_wred_en=0 --lmem_queue_avg_ctr=0 --\nlmem_queue_wred_en=0 --rxf_queue_avg_ctr=1 --rxf_queue_wred_en=1\n1.LMEM 이 올바르게 설정된다.",
        "Expected Result": "2.DMEM 이 올바르게 설정된다.\n3.RXF 이 올바르게 설정된다.\n1.LMEM 이 올바르게 설정된다.",
        "Test output": "",
        "page": 264,
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "IQWRED-002",
        "Description": "* Thr_max > Buffer Level : 정해진 확률에 의한 Drop 처리\n* Thr_max < Buffer Level: ‘Reserved’ 프레임만 수신, 나머지는 Drop\n처리.\nTPA 는 { Thr_max – Thr_min } 범위 내에서 Buffer 를 4 개의 Zone 으로\n분할하여 Buffer Level 이 Zone 에 해당하는 경우 정해진 확률로\n프레임을 Drop 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.wred 설정을 한다.",
        "Sequence": "2.Tester 에서 emac1 으로 traffic 을 인가한다\n1.\ntc-tpa ingqos_wred_conf qos_reg --emac=1 --dmem_queue_avg_ctr=0 --\ndmem_queue_wred_en=0 --lmem_queue_avg_ctr=1 --\nlmem_queue_wred_en=1 --rxf_queue_avg_ctr=0 --rxf_queue_wred_en=0\ntc-tpa ingqos_wred_conf memq_zone_prob --emac=1  --",
        "Input": "max_threshold=0x1f72 --min_threshold=0x32 --qfull_threshold=0x1FA4 -\n-queue_weight=5 --sel_queue=2 --zone1_pro=1 --zone2_pro=2 --\nzone3_pro=4 --zone4_pro=8\n2.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200",
        "Expected Result": "2.wred 에 의하여 정해진 확률로 프레임을 Drop 한다.",
        "Test output": "",
        "Test result": "NT",
        "page": 266,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          }
        ]
      },
      {
        "Test case ID": "IQWRED-003",
        "Description": "한다. (Zone-1 ~ Zone-4)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1.4 개의 zone 을 이용한 wred 를 설정한다.\n1.\ntc-tpa ingqos_wred_conf memq_zone_prob --emac=1  --\nmax_threshold=0x1f72 --min_threshold=0x32 --qfull_threshold=0x1FA4 -\n-queue_weight=5 --sel_queue=2 --zone1_pro=1 --zone2_pro=2 --",
        "Input": "zone3_pro=4 --zone4_pro=8\n2.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200\n1.wred 가 올바르게 설정된다.",
        "Expected Result": "2.Tester 에서 emac1 으로 traffic 을 인가한다",
        "Test output": "NT",
        "Test result": "-. ingqos buffer 를 채울 수 있는 시험환경구성 구성중",
        "page": 268,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          }
        ]
      },
      {
        "Test case ID": "IQWRED-004",
        "Description": "",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1.4 개의 zone 을 이용한 wred 를 설정한다.\n1.\ntc-tpa ingqos_wred_conf memq_zone_prob --emac=1  --\nmax_threshold=0x1f72 --min_threshold=0x32 --qfull_threshold=0x1FA4 --\nqueue_weight=5 --sel_queue=2 --zone1_pro=1 --zone2_pro=2 --",
        "Input": "zone3_pro=4 --zone4_pro=8\n2.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200\n1.wred 가 올바르게 설정된다.",
        "Expected Result": "2.Tester 에서 emac1 으로 traffic 을 인가한다",
        "Test output": "NT",
        "Test result": "-. ingqos buffer 를 채울 수 있는 시험환경구성 구성중",
        "page": 269,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          }
        ]
      },
      {
        "Test case ID": "IQWRED-005",
        "Description": "Zone 에 지정된 확률에 따라 ‘Unmanaged’ 프레임을 Drop 해야 한다 (각\nZone 의 확률 총합은 1)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1.4 개의 zone 을 이용한 wred 를 설정한다.\n1.\ntc-tpa ingqos_wred_conf memq_zone_prob --emac=1  --\nmax_threshold=0x1f72 --min_threshold=0x32 --qfull_threshold=0x1FA4 -\n-queue_weight=5 --sel_queue=2 --zone1_pro=1 --zone2_pro=2 --",
        "Input": "zone3_pro=4 --zone4_pro=8\n2.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200\n1.wred 가 올바르게 설정된다.",
        "Expected Result": "2.Tester 에서 emac1 으로 traffic 을 인가한다",
        "Test output": "NT",
        "Test result": "-. ingqos buffer 를 채울 수 있는 시험환경구성 구성중",
        "page": 270,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          }
        ]
      },
      {
        "Test case ID": "IQWRED-006",
        "Description": "프레임 개수\n- Managed Count: Flow Lookup 결과 Matching 된 ‘Managed’ 프레임의\n개수\n- Reserved Count; Flow Lookup 결과 Matching 된 ‘Reserved’ 프레임\n개수\n- Unmanaged Count: Flow Lookup 결과 Matching 되지 않은\n‘Unmanaged’ 프레임 개수",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.wred 설정을 한다.",
        "Sequence": "2.Tester 에서 emac1 으로 traffic 을 인가한다\n1.\ntc-tpa ingqos_wred_conf qos_reg --emac=1 --dmem_queue_avg_ctr=0 --\ndmem_queue_wred_en=0 --lmem_queue_avg_ctr=1 --\nlmem_queue_wred_en=1 --rxf_queue_avg_ctr=0 --rxf_queue_wred_en=0\ntc-tpa ingqos_wred_conf memq_zone_prob --emac=1  --",
        "Input": "max_threshold=0x1f72 --min_threshold=0x32 --qfull_threshold=0x1FA4 -\n-queue_weight=5 --sel_queue=2 --zone1_pro=1 --zone2_pro=2 --\nzone3_pro=4 --zone4_pro=8\n2.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  192.168.10.0  192.168.10.200",
        "Expected Result": "2.wred 에 의하여 정해진 확률로 프레임을 drop 한다.",
        "Test output": "NT",
        "Test result": "-. ingqos buffer 를 채울 수 있는 시험환경구성 구성중",
        "page": 271,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "192.168.10.0",
            "DIP": "192.168.10.200"
          }
        ]
      },
      {
        "Test case ID": "IQSHP-001",
        "Description": "Shaper 는 Index 로 구분할 수 있어야 한다. (Shaper-0, Shaper-1).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1 -> emac2 로 100% traffic 을 송신한다.",
        "Sequence": "2. bps 단위로 200M shaper 0 으로 설정한다.\n3. bps 단위로 200M shaper 1 으로 설정한다.\n1. emac1 -> emac2 로 100% traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\n2. bps 단위로 200M shaper 롤 설정한다.\ntc-tpa ingqos_shp_config shp_cfg --emac=1 --ifg=12 --shp0_mode=0 --\nshp0_rate=0 --shp1_mode=0 --shp1_rate=0\ntc-tpa ingqos_shp_config shp_ctrl --emac=1 --shp_en=1 --shp_no=0 --",
        "Input": "clk_div=0 --max_credit=0x3fffff --min_credit=0xc13ca --idleslope=400\n3. bps 단위로 200M shaper 1 으로 설정한다.\ntc-tpa ingqos_shp_config shp_cfg --emac=1 --ifg=12 --shp0_mode=0 --\nshp0_rate=0 --shp1_mode=0 --shp1_rate=0\ntc-tpa ingqos_shp_config shp_ctrl --emac=1 --shp_en=1 --shp_no=1 --\nclk_div=0 --max_credit=0x3fffff --min_credit=0xc13ca --idleslope=400\n2.shaper0 에서 바르게 shaping 된다.",
        "Expected Result": "3.shaper1 에서 바르게 shaping 된다.",
        "Test output": "2.shaper0 에서 바르게 shaping 된다.",
        "page": 272,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "IQSHP-002",
        "Description": "- Data Rate: bps (bits-per-second) 단위로 Bandwidth 설정.\n- Packet Rate: pps (packets-per-second) 단위로 Bandwidth 설정.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1 -> emac2 로 100% traffic 을 송신한다.",
        "Sequence": "2. bps 단위로 200M shaper 롤 설정한다.\n1. emac1 -> emac2 로 100% traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2",
        "Input": "2. bps 단위로 200M shaper 롤 설정한다.\ntc-tpa ingqos_shp_config shp_cfg --emac=1 --ifg=12 --shp0_mode=0 --\nshp0_rate=0 --shp1_mode=0 --shp1_rate=0\ntc-tpa ingqos_shp_config shp_ctrl --emac=1 --shp_en=1 --shp_no=0 --\nclk_div=0 --max_credit=0x3fffff --min_credit=0xc13ca --idleslope=400",
        "Expected Result": "2.1G 에서 200M 올바르게 shaping 된다.\n2.1G 에서 200M 올바르게 shaping 된다.",
        "Test output": "Partial PASS",
        "Test result": "-. pps 동작안됨(CLI 동작안되며, HW 제약사항확인필요)\n현재 packet length 1450byte 에서만 동작함.",
        "page": 274,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "IQSHP-003",
        "Description": "않아야 한다. (최소한의 대역폭 보장)\n- Max-Credit <-2147483648 ~ 2147483647>: Credit 의 최대 값을\n의미하며 이 값이 상으로 값이 증가하지 않아야 한다 (트래픽의 대역폭\n독점 방지).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. Credit 설정 값이 shaper 동작 영향 없는 것으로 판단(RS 삭제예정)",
        "page": 275,
        "Input_table": []
      },
      {
        "Test case ID": "IQSHP-004",
        "Description": "- Data Rate: bps (bits-per-second) 단위로 Bandwidth 설정.\n- Packet Rate: pps (packets-per-second) 단위로 Bandwidth 설정.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. RS 스펙 삭제예정",
        "page": 276,
        "Input_table": []
      },
      {
        "Test case ID": "IQSHP-005",
        "Description": "(Idle-Slope 값이 클수록 Credit 을 빠르게 회복).\n- Data Rate: bps (bits-per-second) 단위로 Bandwidth 설정.\n- Packet Rate: pps (packets-per-second) 단위로 Bandwidth 설정.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. idle_slope 설정 값이  IngressQos Shaper 동작 적용 확인.\n-Shaper 동작 정확도 검토 필요",
        "page": 277,
        "Input_table": []
      },
      {
        "Test case ID": "IQSHP-006",
        "Description": "- Shaper-0 Drop: Shaper-0 의 처리 결과 Drop 된 프레임 개수\n- Shaper-1 Drop: Shaper-1 의 처리 결과 Drop 된 프레임 개수",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1 -> emac2 로 100% traffic 을 송신한다.",
        "Sequence": "2. shaper0 을 설정한다.\n3. shaper1 을 설정한다.\n1. emac1 -> emac2 로 100% traffic 을 송신한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\n2. shaper0 을 설정한다.\ntc-tpa ingqos_shp_config shp_cfg --emac=1 --ifg=12 --shp0_mode=0 --\nshp0_rate=0 --shp1_mode=0 --shp1_rate=0",
        "Input": "tc-tpa ingqos_shp_config shp_ctrl --emac=1 --shp_en=1 --shp_no=0 --\nclk_div=0 --max_credit=0x3fffff --min_credit=0xc13ca --idleslope=400\n3. shaper1 을 설정한다.\ntc-tpa ingqos_shp_config shp_cfg --emac=1 --ifg=12 --shp0_mode=0 --\nshp0_rate=0 --shp1_mode=0 --shp1_rate=0\ntc-tpa ingqos_shp_config shp_ctrl --emac=1 --shp_en=1 --shp_no=1 --\nclk_div=0 --max_credit=0x3fffff --min_credit=0xc13ca --idleslope=400\n2.shaper0 의 drop count 가 증가한다.",
        "Expected Result": "3.shaper1 의 drop count 가 증가한다.\n2.shaper0 의 drop count 가 증가한다.",
        "Test output": "3. shaper1 의 drop count 가 증가한다.",
        "page": 278,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "EGQUE-001",
        "Description": "하며 각 Queue 는 고유의 Queue-ID 로 식별해야 한다 (Queue-0 ~\nQueue-15).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1 queue0-16 을 출력한다.",
        "Sequence": "2. emac2 queue0-16 을 출력한다.\n3. emac3 queue0-16 을 출력한다.\n1.\ntc-tpa tlite_get que_stats --device_id=1 --hw_type=1 --queue_number=1\ntc-tpa tlite_get que_stats --device_id=1 --hw_type=1 --\nqueue_number=16",
        "Input": "2.\ntc-tpa tlite_get que_stats --device_id=2 --hw_type=1 --queue_number=1\ntc-tpa tlite_get que_stats --device_id=2 --hw_type=1 --\nqueue_number=16",
        "page": 280,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EGQUE-002",
        "Description": "활성화/비활성화가 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.(queue1 활성화)\n3.port4 -> tc5 -> queue3 로 설정한다. (queue3 활성화)",
        "Sequence": "4.scheduling 를 pq 로 설정한다.\n5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n2.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3",
        "Input": "4.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1\n6.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT1  00:00:00:00:11:11  00:00:00:00:33:33  100.1.1.1  100.1.1.3\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1\nT3  00:00:00:00:33:33  00:00:00:00:11:11  100.1.1.3  100.1.1.1",
        "page": 282,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T3",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGQUE-003",
        "Description": "Egress Queue 매핑을 지원해야 한다. 매핑은 정적으로 설정할 수 있으며\n조회가 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.",
        "Sequence": "4.scheduling 를 pq 로 설정한다.\n5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3",
        "Input": "4. scheduling 를 pq 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1\n6. traffic 을 100% 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT1  00:00:00:00:11:11  00:00:00:00:33:33  100.1.1.1  100.1.1.3\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1",
        "page": 284,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGQUE-004",
        "Description": "지원해야 한다. 매핑은 정적으로 설정할 수 있으며 조회가 가능해야\n한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.",
        "Sequence": "4.scheduling 를 pq 로 설정한다.\n5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n1.\ntc-tpa bd_mac add --vlan=1 --mac=00:00:00:00:11:11 --hact=0 --hifch=0\n--tc=0 --polist=0x1\ntc-tpa bd_mac add --vlan=1 --mac=00:00:00:00:22:22 --hact=0 --hifch=0\n--tc=3 --polist=0x2\ntc-tpa bd_mac add --vlan=1 --mac=00:00:00:00:33:33 --hact=0 --hifch=0\n--tc=5 --polist=0x8\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=43690",
        "Input": "tc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=43690\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3\n4. scheduling 를 pq 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1",
        "page": 286,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EGQUE-005",
        "Description": "Queue 매핑을 지원해야 한다. 매핑은 정적으로 설정할 수 있으며\n조회가 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 pcp 로 설정한다.\n2.pcp1 -> tc3 -> queue1 로 설정한다.\n3.pcp7 -> tc5 -> queue3 로 설정한다.",
        "Sequence": "4.scheduling 를 pq 로 설정한다.\n5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n2. pcp1 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=21845\ntc-tpa tlite_set pcp2tc --dev_id=2 --port=2 --pcp_value=1 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. pcp7 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=21845\ntc-tpa tlite_set pcp2tc --dev_id=4 --port=4 --pcp_value=7 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3",
        "Input": "4. scheduling 를 pq 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1\n6. traffic 을 100% 인가한다.\nPort  SMAC  DMAC  SIP  DIP  Vlan  Pcp\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2  10\nT1  00:00:00:00:11:11  00:00:00:00:33:33  100.1.1.1  100.1.1.3  10\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  10  1\nT3  00:00:00:00:33:33  00:00:00:00:11:11  100.1.1.3  100.1.1.1  10  7",
        "page": 288,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T3",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGQUE-006",
        "Description": "정적으로 설정할 수 있으며 조회가 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 dscp 로 설정한다.\n2.dscp10 -> tc3 -> queue1 로 설정한다.\n3.dscp56 -> tc5 -> queue3 로 설정한다.",
        "Sequence": "4.scheduling 를 pq 로 설정한다.\n5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n2. dscp10 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --tsv=0\ntc-tpa tlite_set dscp2tc --dev_id=2 --dscp_value=10 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. dscp56 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --tsv=0\ntc-tpa tlite_set dscp2tc --dev_id=4 --dscp_value=56 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3",
        "Input": "4. scheduling 를 pq 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1\n6. traffic 을 100% 인가한다.\nPort  SMAC  DMAC  SIP  DIP  Dscp\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT1  00:00:00:00:11:11  00:00:00:00:33:33  100.1.1.1  100.1.1.3\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  10\nT3  00:00:00:00:33:33  00:00:00:00:11:11  100.1.1.3  100.1.1.1  56\n6.dscp56 로 인입된 패킷은 100% 보장되고 dscp10 로 인입된 패킷은",
        "Expected Result": "폐기된다.",
        "page": 290,
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T3",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGQALGO-001",
        "Description": "각 Queue-ID 에 대해 알고리즘 설정이 가능해야 한다. (기본 알고리즘은\nTail-Drop).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.tail drop 을 설정한다.",
        "Sequence": "2.wred 를 설정한다.\n1.\ntc-tpa tlite_del_classq --di=1 --ci=1 --ht=1\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_add_classq --di=1 --ci=1 --si=1 --ss=1 --tw=0 --tq=1 --\nml=50 --mil=1 --pc0=0 --pc1=0 --pc2=0 --pc3=0 --pc4=0 --pc5=0 --\npc6=0 --pc7=0 --ht=1",
        "Input": "2.\ntc-tpa tlite_del_classq --di=1 --ci=1 --ht=1\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_add_classq --di=1 --ci=1 --si=1 --ss=1 --tw=0 --tq=2 --\nml=50 --mil=1 --pc0=0 --pc1=0 --pc2=0 --pc3=0 --pc4=0 --pc5=0 --\npc6=0 --pc7=0 --ht=1\n1.tail drop 이 올바르게 설정된다.",
        "Expected Result": "2.wred 가 올바르게 설정된다.\n1.tail drop 이 올바르게 설정된다.",
        "Test output": "2.wred 가 올바르게 설정된다.",
        "Test result": "PASS",
        "page": 292,
        "Input_table": []
      },
      {
        "Test case ID": "EGQALGO-002",
        "page": 293,
        "Description": "",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T4",
            "SMAC": "00:00:00:00:44:44",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.4",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGQALGO-003",
        "Description": "있어야 하며, Queue 레벨이 Q_max 에 도달하는 경우 (Queue Full) 이후\n수신되는 프레임은 모두 Drop 되어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.q_max 를 100 으로 설정한다.\n2.Tester_2- > emac2 -> emac1 -> Tester_1 의 구성에서 100% 트래픽을\n구성한다.\n3.Tester_4- > emac4 -> emac1 -> Tester_1 의 구성에서 80% 트래픽을\n구성한다.\n4.Tester 트래픽을 인가한다.\n5.drop count 를 확인한다.",
        "Sequence": "6.q_max 를 50 으로 설정한다.\n7.Tester_2- > emac2 -> emac1 -> Tester_1 의 구성에서 100% 트래픽을\n구성한다.\n8.Tester_4- > emac4 -> emac1 -> Tester_1 의 구성에서 10 개의 트래픽을\n구성한다.\n9.Tester 트래픽을 인가한다.\n10.drop count 를 확인한다.\n1.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_del_classq --ci=1 --di=1 --ht=1\ntc-tpa tlite_add_classq --di=1 --ci=1 --si=1 --ss=1 --tw=0 --tq=1 --\nml=100 --mil=0 --pc0=0 --pc1=0 --pc2=0 --pc3=0 --pc4=0 --pc5=0 --\npc6=0 --pc7=0 --ht=1\ntc-tpa write_reg --addr=2080F0 --data=0xf",
        "Input": "2.\nPort  SMAC  DMAC  SIP  DIP  Length\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  128\nT4  00:00:00:00:44 :44  00:00:00:00:11:11  100.1.1.4  100.1.1.1  128\n5.\ntc-tpa write_reg --addr=208134 --data=0x1",
        "page": 296,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T4",
            "SMAC": "00:00:00:00:44 :44",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.4",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGQALGO-004",
        "Description": "수 있어야 하며, Queue 의 Depth 는 ‘Q_max – Q_min’값으로 결정된다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.wred 를 적용하고 q_min=10 / q_max=900 / zone1=40 / zone2=30 /\nzone3=10 / zone4=4 / zone5=4 / zone6=4 / zone7=4 / zone8=4 으로\n설정한다.\n2.Tester_2- > emac2 -> emac1 -> Tester_1 의 구성에서 100% 트래픽을",
        "Sequence": "구성한다.\n3.Tester_4- > emac4 -> emac1 -> Tester_1 의 구성에서 10% 트래픽을\n구성한다.\n4.Tester 트래픽을 인가한다.\n5.drop count 를 확인한다.\n1.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_del_classq --ci=1 --di=1 --ht=1\ntc-tpa tlite_add_classq --di=1 --ci=1 --si=1 --ss=1 --tw=0 --tq=2 --\nml=100 --mil=10 --pc0=40 --pc1=30 --pc2=10 --pc3=4 --pc4=4 --\npc5=4 --pc6=4 --pc7=4 --ht=1\ntc-tpa write_reg --addr=2080F0 --data=0xf",
        "Input": "2.\nPort  SMAC  DMAC  SIP  DIP  Length\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  128\nT4  00:00:00:00:44 :44  00:00:00:00:11:11  100.1.1.4  100.1.1.1  128\n5.\ntc-tpa write_reg --addr=208134 --data=0x1\ntc-tpa write_reg --addr=208020 --data=0\ntc-tpa read_reg --addr=208020 --size=4",
        "Expected Result": "5.drop count 가 증가한다.",
        "Test output": "5.drop count 가 증가한다.",
        "page": 299,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T4",
            "SMAC": "00:00:00:00:44 :44",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.4",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGQALGO-005",
        "Description": "Zone 을 분할 및 제공할 수 있어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.wred 를 적용하고 q_min=10 / q_max=900 / zone1=40 / zone2=30 /\nzone3=10 / zone4=4 / zone5=4 / zone6=4 / zone7=4 / zone8=4 으로\n설정한다.\n2.Tester_2- > emac2 -> emac1 -> Tester_1 의 구성에서 100% 트래픽을",
        "Sequence": "구성한다.\n3.Tester_4- > emac4 -> emac1 -> Tester_1 의 구성에서 10% 트래픽을\n구성한다.\n4.Tester 트래픽을 인가한다.\n5.drop count 를 확인한다.\n1.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_del_classq --ci=1 --di=1 --ht=1\ntc-tpa tlite_add_classq --di=1 --ci=1 --si=1 --ss=1 --tw=0 --tq=2 --\nml=100 --mil=10 --pc0=40 --pc1=30 --pc2=10 --pc3=4 --pc4=4 --\npc5=4 --pc6=4 --pc7=4 --ht=1\ntc-tpa write_reg --addr=2080F0 --data=0xf",
        "Input": "2.\nPort  SMAC  DMAC  SIP  DIP  Length\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  128\nT4  00:00:00:00:44 :44  00:00:00:00:11:11  100.1.1.4  100.1.1.1  128\n5.\ntc-tpa write_reg --addr=208134 --data=0x1\ntc-tpa write_reg --addr=208020 --data=0\ntc-tpa read_reg --addr=208020 --size=4",
        "Expected Result": "5.drop count 가 증가한다.",
        "Test output": "5.drop count 가 증가한다.",
        "page": 301,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T4",
            "SMAC": "00:00:00:00:44 :44",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.4",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGQALGO-006",
        "Description": "할당된 확률로 프레임이 Drop 되어야 한다. 이때, 각 Zone 에 할당할 수\n있는 ‘Drop Probability’는 31%이며, ‘Drop Probability’의 총합은 1 이어야\n한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.wred 를 적용하고 q_min=10 / q_max=900 / zone1=40 / zone2=30 /\nzone3=10 / zone4=4 / zone5=4 / zone6=4 / zone7=4 / zone8=4 으로\n설정한다.\n2.Tester_2- > emac2 -> emac1 -> Tester_1 의 구성에서 100% 트래픽을",
        "Sequence": "구성한다.\n3.Tester_4- > emac4 -> emac1 -> Tester_1 의 구성에서 10% 트래픽을\n구성한다.\n4.Tester 트래픽을 인가한다.\n5.drop count 를 확인한다.\n1.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_del_classq --ci=1 --di=1 --ht=1\ntc-tpa tlite_add_classq --di=1 --ci=1 --si=1 --ss=1 --tw=0 --tq=2 --\nml=100 --mil=10 --pc0=40 --pc1=30 --pc2=10 --pc3=4 --pc4=4 --\npc5=4 --pc6=4 --pc7=4 --ht=1\ntc-tpa write_reg --addr=2080F0 --data=0xf",
        "Input": "2.\nPort  SMAC  DMAC  SIP  DIP  Length\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  128\nT4  00:00:00:00:44 :44  00:00:00:00:11:11  100.1.1.4  100.1.1.1  128\n5.\ntc-tpa write_reg --addr=208134 --data=0x1\ntc-tpa write_reg --addr=208020 --data=0\ntc-tpa read_reg --addr=208020 --size=4",
        "Expected Result": "5.drop count 가 증가한다.",
        "page": 303,
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T4",
            "SMAC": "00:00:00:00:44 :44",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.4",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGQALGO-007",
        "Description": "경우, ‘Tail-Drop’ 방식으로 프레임을 Drop 해야 하며, Queue 레벨이\nQ_max 이하로 내려가는 경우 WRED 방식으로 환원되어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.wred 를 적용하고 q_min=10 / q_max=900 / zone1=40 / zone2=30 /\nzone3=10 / zone4=4 / zone5=4 / zone6=4 / zone7=4 / zone8=4 으로\n설정한다.\n2.Tester_2- > emac2 -> emac1 -> Tester_1 의 구성에서 100% 트래픽을",
        "Sequence": "구성한다.\n3.Tester_4- > emac4 -> emac1 -> Tester_1 의 구성에서 10% 트래픽을\n구성한다.\n4.Tester 트래픽을 인가한다.\n5.drop count 를 확인한다.\n1.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_del_classq --ci=1 --di=1 --ht=1\ntc-tpa tlite_add_classq --di=1 --ci=1 --si=1 --ss=1 --tw=0 --tq=2 --\nml=100 --mil=10 --pc0=40 --pc1=30 --pc2=10 --pc3=4 --pc4=4 --\npc5=4 --pc6=4 --pc7=4 --ht=1\ntc-tpa write_reg --addr=2080F0 --data=0xf",
        "Input": "2.\nPort  SMAC  DMAC  SIP  DIP  Length\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  128\nT4  00:00:00:00:44 :44  00:00:00:00:11:11  100.1.1.4  100.1.1.1  128\n5.\ntc-tpa write_reg --addr=208134 --data=0x1\ntc-tpa write_reg --addr=208020 --data=0\ntc-tpa read_reg --addr=208020 --size=4",
        "Expected Result": "5.drop count 가 증가한다.",
        "Test output": "5.drop count 가 증가한다.",
        "page": 305,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T4",
            "SMAC": "00:00:00:00:44 :44",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.4",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGQALGO-008",
        "Description": "제공해야 한다.[TBD]",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.wred 를 적용하고 q_min=10 / q_max=900 / zone1=40 / zone2=30 /\nzone3=10 / zone4=4 / zone5=4 / zone6=4 / zone7=4 / zone8=4 으로\n설정한다.\n2.Tester_2- > emac2 -> emac1 -> Tester_1 의 구성에서 100% 트래픽을",
        "Sequence": "구성한다.\n3.Tester_4- > emac4 -> emac1 -> Tester_1 의 구성에서 10% 트래픽을\n구성한다.\n4.Tester 트래픽을 인가한다.\n5.drop count 를 확인한다.\n1.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_del_classq --ci=1 --di=1 --ht=1\ntc-tpa tlite_add_classq --di=1 --ci=1 --si=1 --ss=1 --tw=0 --tq=2 --\nml=100 --mil=10 --pc0=40 --pc1=30 --pc2=10 --pc3=4 --pc4=4 --\npc5=4 --pc6=4 --pc7=4 --ht=1\ntc-tpa write_reg --addr=2080F0 --data=0xf",
        "Input": "2.\nPort  SMAC  DMAC  SIP  DIP  Length\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1  128\nT4  00:00:00:00:44 :44  00:00:00:00:11:11  100.1.1.4  100.1.1.1  128\n5.\ntc-tpa write_reg --addr=208134 --data=0x1\ntc-tpa write_reg --addr=208020 --data=0\ntc-tpa read_reg --addr=208020 --size=4",
        "Expected Result": "5.drop count 가 증가한다.",
        "Test output": "NA",
        "Test result": "-. TBD",
        "page": 307,
        "Input_table": [
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T4",
            "SMAC": "00:00:00:00:44 :44",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.4",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGSCH-001",
        "Description": "Scheduler 는 Scheduler-ID 로 식별할 수 있어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1. emac1~4 interface 당 2 개의 scheduler 를 출력한다.\n1.",
        "Input": "tc-tpa tlite_get sch_list --device_id=1",
        "Expected Result": "1. scheduler 2 개가 올바르게 출력된다.\n1. scheduler 2 개가 올바르게 출력된다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 308,
        "Input_table": []
      },
      {
        "Test case ID": "EGSCH-002",
        "Description": "- Packet Rate: packets-per-second 단위로 프레임을 출력.\n동작 모드는 운용 중 조회 및 변경이 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.\n4.scheduling 를 pq 로 설정한다.",
        "Sequence": "5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n7.shaper 를 bps 로 100M 로 설정한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --",
        "Input": "tsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3\n4. scheduling 를 pq 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1",
        "page": 309,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EGSCH-003",
        "Description": "제공해야 하며, 각 SCH_in 과 SCH_out 은 정적으로 설정 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.",
        "Sequence": "4.scheduling 를 pq 로 설정한다.\n5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n2.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3",
        "Input": "4.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa write_reg --addr=2080F0 --data=0xf\n6.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT1  00:00:00:00:11:11  00:00:00:00:33:33  100.1.1.1  100.1.1.3\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1\nT3  00:00:00:00:33:33  00:00:00:00:11:11  100.1.1.3  100.1.1.1",
        "page": 311,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T3",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGSCH-ALGO-001",
        "Description": "Queue-ID 가 클수록 더 높은 Priority 를 갖는다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.",
        "Sequence": "4.scheduling 를 pq 로 설정한다.\n5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1",
        "Input": "3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5",
        "page": 313,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EGSCH-ALGO-002",
        "Description": "Scheduling 해야 하며, 높은 우선 순위를 가진 Queue 가 비워질 때까지\n(Emptied), 낮은 우선순위 Queue 의 프레임 출력은 보류되어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.",
        "Sequence": "4.scheduling 를 pq 로 설정한다.\n5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3",
        "Input": "4. scheduling 를 pq 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1\n6. traffic 을 100% 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT1  00:00:00:00:11:11  00:00:00:00:33:33  100.1.1.1  100.1.1.3\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1",
        "page": 315,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGSCH-ALGO-003",
        "Description": "Queue 를 순회하며 프레임을 Scheduling 할 수 있어야 한다. (각\nQueue 는 동일한 비율로 처리)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.",
        "Sequence": "4.scheduling 를 rr 로 설정한다.\n5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3",
        "Input": "4. scheduling 를 rr 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=4 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1\n6. traffic 을 100% 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT1  00:00:00:00:11:11  00:00:00:00:33:33  100.1.1.1  100.1.1.3\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1",
        "page": 317,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EGSCH-ALGO-004",
        "Description": "수 있어야 한다. 이때, Weight 는 해당 Physical Interface 에서 제공할 수\n있는 Link Speed 의 특정 %로 계산하여 할당해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc7 -> queue3 로 설정한다.\n4.scheduling 를 dwrr 로 설정한다.",
        "Sequence": "5.weight 를 9:1 로 설정한다.\n6.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_4 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n7.traffic 을 100% 인가한다.\n2.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=7\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=7 --cos_value=3",
        "Input": "4.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_sch_config --di=1 --si=1 --at=3 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_add_classq --di=1 --ci=2 --si=1 --ss=1 --tw=0x90 --tq=2 --\nml=200 --mil=1 --pc0=10 --pc1=13 --pc2=16 --pc3=19 --pc4=21 --\npc5=24 --pc6=27 --pc7=30 --ht=1\ntc-tpa tlite_add_classq --di=1 --ci=4 --si=1 --ss=1 --tw=0x10 --tq=2 --\nml=200 --mil=1 --pc0=10 --pc1=13 --pc2=16 --pc3=19 --pc4=21 --\npc5=24 --pc6=27 --pc7=30 --ht=1\ntc-tpa write_reg --addr=2080F0 --data=0xf",
        "page": 319,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EGSCH-ALGO-005",
        "Description": "총합은 해당 Physical Interface 에서 제공하는 최대 Link Speed 를 초과할\n수 없다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc7 -> queue3 로 설정한다.\n4.scheduling 를 dwrr 로 설정한다.",
        "Sequence": "5.weight 를 9:1 로 설정한다.\n6.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_4 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n7.traffic 을 100% 인가한다.\n2.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=7\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=7 --cos_value=3",
        "Input": "4.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_sch_config --di=1 --si=1 --at=3 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_add_classq --di=1 --ci=2 --si=1 --ss=1 --tw=0x90 --tq=2 --\nml=200 --mil=1 --pc0=10 --pc1=13 --pc2=16 --pc3=19 --pc4=21 --\npc5=24 --pc6=27 --pc7=30 --ht=1\ntc-tpa tlite_add_classq --di=1 --ci=4 --si=1 --ss=1 --tw=0x10 --tq=2 --\nml=200 --mil=1 --pc0=10 --pc1=13 --pc2=16 --pc3=19 --pc4=21 --\npc5=24 --pc6=27 --pc7=30 --ht=1\ntc-tpa write_reg --addr=2080F0 --data=0xf",
        "page": 321,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EGSCH-ALGO-006",
        "Description": "(참고. TPA 내부에서 ‘Deficit’ 값을 관리하는데, 이 값은 해당 Queue 가\nScheduling 되면 값이 감소하고, 희생 – Scheduling 할 수 있는 순서에서\nDeficit 값이 부족하여 다음 Round 로 Scheduling 을 미룸 – 시 Deficit\n값이 증가한다).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc7 -> queue3 로 설정한다.\n4.scheduling 를 dwrr 로 설정한다.",
        "Sequence": "5.weight 를 9:1 로 설정한다.\n6.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_4 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n7.traffic 을 100% 인가한다.\n2.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535",
        "Input": "tc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=7\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=7 --cos_value=3\n4.\ntc-tpa write_reg --addr=2080F0 --data=0x1d\ntc-tpa tlite_sch_config --di=1 --si=1 --at=3 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_add_classq --di=1 --ci=2 --si=1 --ss=1 --tw=0x90 --tq=2 --\nml=200 --mil=1 --pc0=10 --pc1=13 --pc2=16 --pc3=19 --pc4=21 --\npc5=24 --pc6=27 --pc7=30 --ht=1",
        "page": 323,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EGSCH-STAGE-001",
        "Description": "Example – Single Stage Scheduler",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.",
        "Sequence": "4.scheduling 를 pq 로 설정한다.\n5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n2.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1",
        "Input": "3.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3\n4.",
        "page": 325,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EGSCH-STAGE-002",
        "Description": "Example - Multiple Stage Scheduler",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc1 -> queue1 로 설정한다.\n3.port3 -> tc2 -> queue2 로 설정한다.\n4.port4 -> tc5 -> queue5 로 설정한다.",
        "Sequence": "5.scheduler0 = rr / scheduler1= pq 로 설정한다.(default)\n6.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n7.traffic 을 100% 인가한다.\n2. port2 -> tc1 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=1\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=1 --cos_value=1",
        "Input": "3. port3 -> tc2 -> queue2 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=3 --port=3 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=3 --port=3 --tc_value=2\ntc-tpa tlite_set tc2cos --dev_id=3 --port=3 --tc_value=2 --cos_value=2",
        "page": 327,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EQSHP-001",
        "Description": "Shaper 는 Index 로 구분할 수 있어야 한다. (Shaper-0 ~ Shaper-3). 각\nShaper 별로 활성화/비활성화 가능해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.\n4.scheduling 를 rr 로 설정한다.",
        "Sequence": "5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n7.shaper 를 queue3 에 100M 로 설정한다.\n8.shaper 를 queue1 에 100M 로 설정한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5",
        "Input": "tc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3\n6. traffic 을 100% 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2\nT1  00:00:00:00:11:11  00:00:00:00:33:33  100.1.1.1  100.1.1.3\nT2  00:00:00:00:22:22  00:00:00:00:11:11  100.1.1.2  100.1.1.1\nT3  00:00:00:00:33:33  00:00:00:00:11:11  100.1.1.3  100.1.1.1",
        "page": 329,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          },
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:33:33",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.3"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.2",
            "DIP": "100.1.1.1"
          },
          {
            "Port": "T3",
            "SMAC": "00:00:00:00:33:33",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "100.1.1.3",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "EQSHP-002",
        "Description": "- Data Rate: bps (byte-per-second) 단위로 Bandwidth 설정.\n- Packet Rate: pps (packets-per-second) 단위로 Bandwidth 설정.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.\n4.scheduling 를 pq 로 설정한다.",
        "Sequence": "5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n7.shaper 를 bps 로 100M 로 설정한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5",
        "Input": "tc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3\n4. scheduling 를 pq 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1\n6. traffic 을 100% 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2",
        "page": 331,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "EQSHP-003",
        "Description": "않아야 한다. (최소한의 대역폭 보장)\n- Max-Credit <-2147483648 ~ 2147483647>: Credit 의 최대 값을\n의미하며 이 값 이상으로 값이 증가하지 않아야 한다 (트래픽의 대역폭\n독점 방지).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.\n4.scheduling 를 pq 로 설정한다.",
        "Sequence": "5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n7.shaper 를 bps 로 1000M 로 설정한다.\n8.credit-based-shaper 를 100M 설정한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --",
        "Input": "tsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3\n4. scheduling 를 pq 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1",
        "page": 333,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EQSHP-004",
        "Description": "- Data Rate: bps (byte-per-second) 단위로 Bandwidth 설정\nPacket Rate: pps (packets-per-second) 단위로 Bandwidth 설정.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.\n4.scheduling 를 pq 로 설정한다.",
        "Sequence": "5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n7.shaper 를 bps 로 100M 로 설정한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5",
        "Input": "tc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3\n4. scheduling 를 pq 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1\n6. traffic 을 100% 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  100.1.1.2",
        "page": 335,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "100.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "EQSHP-005",
        "Description": "(Idle-Slope 값이 클수록 Credit 을 빠르게 회복).\n- Data Rate: bps (byte-per-second) 단위로 Bandwidth 설정.\n- Packet Rate: pps (packets-per-second) 단위로 Bandwidth 설정.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc3 -> queue1 로 설정한다.\n3.port4 -> tc5 -> queue3 로 설정한다.\n4.scheduling 를 pq 로 설정한다.",
        "Sequence": "5.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n6.traffic 을 100% 인가한다.\n7.shaper 를 bps 로 100M 로 설정한다.\n2. port2 -> tc3 -> queue1 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=2 --port=2 --sv=0 --vv=0 --iv=0 --\ntsv=65535\ntc-tpa tlite_set pid2tc --dev_id=2 --port=2 --tc_value=3\ntc-tpa tlite_set tc2cos --dev_id=2 --port=2 --tc_value=3 --cos_value=1\n3. port4 -> tc5 -> queue3 로 설정한다.\ntc-tpa tlite_set port_tc --dev_id=4 --port=4 --sv=0 --vv=0 --iv=0 --\ntsv=65535",
        "Input": "tc-tpa tlite_set pid2tc --dev_id=4 --port=4 --tc_value=5\ntc-tpa tlite_set tc2cos --dev_id=4 --port=4 --tc_value=5 --cos_value=3\n4. scheduling 를 pq 로 설정한다.\ntc-tpa tlite_dynamic config_enable --ht=1\ntc-tpa tlite_sch_config --di=1 --si=1 --at=1 --ht=1 --tp=1 --tw=0x3FF\ntc-tpa tlite_dynamic config_done --ht=1\n6. traffic 을 100% 인가한다.\nPort  SMAC  DMAC  SIP  DIP",
        "page": 337,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EQSHP-006",
        "Description": "TMU Shaper Position\nShaper 의 Connecting Position 은 총 33 개이며, Postion-0 와 Position-",
        "page": 339,
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "EQSHP-007",
        "Description": "- Shaper-0 Drop: Shaper-0 의 처리 결과 Drop 된 프레임 개수[TBD]\n- Shaper-1 Drop: Shaper-1 의 처리 결과 Drop 된 프레임 개수[TBD]",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. TBD",
        "page": 342,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASGEN-001",
        "Description": "활성화/비활성화할 수 있어야 하며, 상태 조회가 가능해야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 343,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASGEN-002",
        "Description": "활성화/비활성화 할 수 있어야 하며, 상태 조회가 가능해야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 344,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASGEN-003",
        "Description": "활성화/비활성화 할 수 있어야 하며, 상태 조회가 가능해야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 345,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASGEN-004",
        "Description": "TPA 는 TAS 기반의 Port Shaping 을 위해 각 Queue 를 대상으로 미리\n정해진 시간표(Time Table)을 설정하며, ‘Time Table’을 기반으로 출력\n대상 Queue 를 선택한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 346,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASGCL-001",
        "Description": "순간에는 둘 중 하나의 GCL 을 적용해야 한다. 나머지 GCL 은 Time\nTable 업데이트 용도로 사용된다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 347,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASGCL-002",
        "Description": "없이 신규 GCL 을 업데이트할 수 있어야 한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 348,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASGCL-003",
        "Description": "Time Extension’ 설정을 지원해야 한다. (단위는 nano-second).",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 349,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASGCL-004",
        "Description": "한다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 350,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASGCL-005",
        "Description": "- GCL 초기 구동을 위한 Timestamp 값 (second) 설정\n- GCL 사이클 반복 시간 설정\n- Time Interval 설정 및 Time Interval 당 Queue 의 Open/Close 상태\n설정",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 351,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASGCL-006",
        "Description": "한다.\nTAS 동작의 경과 TPA 는 각 Queue 에서 발생한 통계를 제공할 수 있다.",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 352,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASTAT-001",
        "Description": "Cycle 통계를 제공해야 한다. (Extra Cycle – Queue-0 ~ Queue-15).",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 353,
        "Input_table": []
      },
      {
        "Test case ID": "EGTASTAT-002",
        "Description": "Drop 카운트를 제공해야 한다 (Packet Drop – Queue-0 ~ Queue-15).",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. HW Timestamp 미동작, GPTP 동작 통한 시간 동기화 기능 필요, (T 사\n작업필요)",
        "page": 354,
        "Input_table": []
      },
      {
        "Test case ID": "EQDEF-001",
        "Description": "TPA 는 Egress QoS 동작을 위한 Default 설정을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.qos 를 port id 로 설정한다.\n2.port2 -> tc1 -> queue1 로 설정한다.\n3.port3 -> tc2 -> queue2 로 설정한다.\n4.port4 -> tc5 -> queue5 로 설정한다.",
        "Sequence": "5.scheduler0 = rr / scheduler1= pq 로 설정한다.(default)\n6.Tester_2 -> emac2 -> emac1 -> Tester_1, Tester_3 -> emac4 -> emac1\n-> Tester_1 으로 traffic 을 생성한다.\n7.traffic 을 100% 인가한다.",
        "Input": "2. port2 -> tc1 -> queue1 로 설정한다.",
        "page": 355,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "MRPM-001_01",
        "Description": "(axon 프로젝트의 경우 (최대 4 개 EMAC 1,2,3,4)의 Mirroring Instance 를\n제공한다)",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac1 의 ingress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\n2. Tester_1,2 -> emac1,2 로 traffic 을 인가한다.\n3. emac1 의 egress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\n4. Tester_1,2 -> emac1,2 로 traffic 을 인가한다.",
        "Sequence": "5. emac2 의 ingress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\n6. Tester_1,2 -> emac1,2 로 traffic 을 인가한다.\n7. emac2 의 egress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\n8. Tester_1,2 -> emac1,2 로 traffic 을 인가한다.",
        "page": 358,
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "MRPM-001-02",
        "Description": "정상동작하여야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac2 의 ingress,egress 패킷을 emac3 로 mirror 하는 설정을",
        "Sequence": "입력한다.\n2. Tester_1,2 -> emac1,2 로 traffic 을 인가한다.\n1. emac2 의 ingress,egress 패킷을 emac3 로 mirror 하는 설정을\n입력한다.\ntc-tpa mirror add --ingress_mirror=0x4 --egress_mirror=0x4 --portNo=2",
        "Input": "2. Tester_1,2 -> emac1,2 로 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22;22  00:00:00:00:11:11  200.1.1.1  100.1.1.1",
        "page": 361,
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22;22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MRPM-001-03",
        "Description": "동작하여야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac2 의 ingress 패킷을 emac3 로 mirror 하는 설정을 입력한다.",
        "Sequence": "2. emac1 의 ingress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\n3. Tester_1,2 -> emac1,2traffic 을 인가한다.\n1. emac2 의 ingress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\ntc-tpa mirror add --ingress_mirror=0x4 --egress_mirror=0 --portNo=2\n2. emac1 의 ingress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\ntc-tpa mirror add --ingress_mirror=0x4 --egress_mirror=0 --portNo=1",
        "Input": "3. Tester_1,2 -> emac1,2 로 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22:22  00:00:00:00:11:11  200.1.1.1  100.1.1.1\n3. emac2 의 ingress 패킷을 emac3 로 mirror 한다.",
        "Expected Result": "3. emac1 의 ingress 패킷을 emac3 로 mirror 한다.\n3. emac2 의 ingress 패킷을 emac3 로 mirror 한다.\n3. emac1 의 ingress 패킷을 emac3 로 mirror 한다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 363,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22:22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MRPM-001-04",
        "Description": "동작하여야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac2 의 egress 패킷을 emac3 로 mirror 하는 설정을 입력한다.",
        "Sequence": "2. emac1 의 egress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\n3. Tester_1,2 -> emac12traffic 을 인가한다.\n1. emac2 의 egress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\ntc-tpa mirror add --ingress_mirror=0 --egress_mirror=0x4 --portNo=2\n2. 1 의 egress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\ntc-tpa mirror add --ingress_mirror=0 --egress_mirror=0x4 --portNo=1",
        "Input": "3. Tester_1,2 ->emac1,2traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22;22  00:00:00:00:11:11  200.1.1.1  100.1.1.1\n3. emac2 의 egress 패킷을 emac3 로 mirror 한다.",
        "Expected Result": "3. emac1 의 egress 패킷을 emac3 로 mirror 한다.\n3. emac2 의 egress 패킷을 emac3 로 mirror 한다.\n3. emac1 의 egress 패킷을 emac3 로 mirror 한다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 364,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22;22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MRPM-002",
        "Description": "Target 에 Mirroring Object 가 포함되지 않아야 한다 (트래픽 순환 방지).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1. emac3 의 ingress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\n1. 3 의 ingress 패킷을 emac3 로 mirror 하는 설정을 입력한다.",
        "Input": "tc-tpa mirror add --ingress_mirror=0x4 --egress_mirror=0x2 --portNo=3",
        "Expected Result": "2.mirror 설정이 되지 않아야 한다.\n2.mirror 설정이 되지 않아야 한다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 365,
        "Input_table": []
      },
      {
        "Test case ID": "MRPM-003",
        "Description": "Target 에 Mirroring Object 가 포함되지 않아야 한다 (트래픽 순환 방지).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1. emac3 의 egress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\n1. emac3 의 egress 패킷을 emac3 로 mirror 하는 설정을 입력한다.",
        "Input": "tc-tpa mirror add --ingress_mirror=0x2 --egress_mirror=0x4 --portNo=3",
        "Expected Result": "2.mirror 설정이 되지 않아야 한다.\n2.mirror 설정이 되지 않아야 한다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 366,
        "Input_table": []
      },
      {
        "Test case ID": "MRPM-004",
        "Description": "원본 패킷 만을 대상으로 동작해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac2 의 egress 패킷을 emac3 로 mirror 하는 설정을 입력한다.",
        "Sequence": "2. Tester_1,2 -> 1,2 traffic 을 인가한다.\n1. emac2 의 egress 패킷을 emac3 로 mirror 하는 설정을 입력한다.\ntc-tpa mirror add --ingress_mirror=0 --egress_mirror=0x4 --portNo=2\n2. Tester_1,2 -> emac1,2traffic 을 인가한다.",
        "Input": "Port  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22;22  00:00:00:00:11:11  200.1.1.1  100.1.1.1",
        "Expected Result": "2. emac2 egress 패킷을 emac3 로 mirror 한다.\n2. emac2 의 egress 패킷을 emac3 로 mirror 한다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 367,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22;22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MRPM-005",
        "Description": "EMAC 포트 중 가장 낮은 인덱스를 가진 EMAC 포트에 egress mirroring\ninstance 를 생성해야 한다. (예: Multicast 그룹 멤버가 EMAC1, EMAC2 인\n경우 EMAC1 의 egress mirroring instance 생성).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.emac1 으로 수신되는 multicast packet 을 emac2,4 로 멤버로 설정한다.",
        "Sequence": "2.emac 포트 중 가장 낮은 인덱스를 가진 emac0 egress mirror 를\nemac3 로 설정한다.\n1.emac1 으로 수신되는 multicast packet 을 emac2,4 로 멤버로 설정한다.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\ntc-tpa bd_mac add --mac=01:00:5E:01:01:02 --polist=0xa --vlan=21 --\nhact=0 --tc=0 --hifch=0",
        "Input": "tc-tpa bd_mac add --mac=00:24:27:88:01:21 --polist=0x1 --vlan=21 --\nhact=0 --tc=0 --hifch=0\n2.emac 포트 중 가장 낮은 인덱스를 가진 emac0 egress mirror 를\nemac3 로 설정한다.\ntc-tpa mirror add --ingress_mirror=0 --egress_mirror=0x4 --portNo=2",
        "Expected Result": "2.emac3 으로 올바르게 mirror 된다.\n2.emac3 으로 올바르게 mirror 된다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 368,
        "Input_table": []
      },
      {
        "Test case ID": "MRPM-006",
        "Description": "Loss 가 없어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1. emac2 의 ingress 패킷을 emac3 로 mirror 하는 설정을 입력한다.",
        "Sequence": "2. Tester_1,2 -> 1,2 로 traffic 을 10 개 인가한다.\n1. emac2 의 ingress 패킷을 emac3 로 mirror 하는 설정을 입력한다\ntc-tpa mirror add --ingress_mirror=0x4 --egress_mirror=0 --portNo=2\n2. Tester_1,2 -> emac,2 traffic 을 인가한다.",
        "Input": "Port  SMAC  DMAC  SIP  DIP\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1\nT2  00:00:00:00:22;22  00:00:00:00:11:11  200.1.1.1  100.1.1.1",
        "Expected Result": "1. emac2 의 ingress 패킷을 emac3 로 10 개 mirror 한다.\n1. emac2 의 ingress 패킷을 emac3 로 10 개 mirror 한다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 369,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22;22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MRPM-007",
        "Description": "예:\n- 원본 Flow (EMAC1, EMAC2): VLAN-129, Tagged Member\n- Mirror Flow (EMAC3): VLAN-129 Untagged Member.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.모든 포트에 vlan10 을 설정한다.\n2.emac1,4 = trunk port / emac2 = access port 로 설정한다.",
        "Sequence": "3.emac1 의 ingress packet 을 emac2 로 mirror 설정한다.\n4.Tester_1,2 -> emac1,2 로 traffic 을 인가한다.\n1.모든 포트에 vlan10 을 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\n2. emac1,4 = trunk port / emac2 = access port 로 설정한다.\ntc-tpa bd_port config --portNo=2 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=10 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 -\n-pcp2tct=0 --tc2cost=0",
        "Input": "3.emac1 의 ingress packet 을 emac2 로 mirror 설정한다.\ntc-tpa mirror add --ingress_mirror=0x1 --egress_mirror=0 --portNo=2\n4. Tester_1,2 -> emac1,2 로 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  10\nT2  00:00:00:00:22;22  00:00:00:00:11:11  200.1.1.1  100.1.1.1  10",
        "Expected Result": "3.emac1 의 ingress packet 이 emac2 로 올바르게 mirror 된다.\n3.emac1 의 ingress packet 이 emac2 로 올바르게 mirror 된다.",
        "Test output": "",
        "Test result": "PASS",
        "page": 370,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22;22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MRPM-008",
        "Description": "예:\n- 원본 Flow (EMAC1, EMAC2): VLAN-129, Untagged Member\n- Mirror Flow (EMAC3): VLAN-129 Tagged Member",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.모든 포트에 vlan10 을 설정한다.\n2.emac1,4 = access port / emac2 = trunk port 로 설정한다.",
        "Sequence": "3.emac1 의 ingress packet 을 emac2 로 mirror 설정한다.\n4.Tester_1,2 -> emac1,2 로 traffic 을 인가한다.\n1.모든 포트에 vlan10 을 설정한다.\ntc-tpa bd add --vlan=10 --fpl=0x1f --utl=0 --mh=0 --mm=0 --uh=0 --\num=1 --msta=0\n2. emac1,4 = access port / emac2 = trunk port 로 설정한다.\ntc-tpa bd_port config --portNo=1 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=10 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 -\n-pcp2tct=0 --tc2cost=0\ntc-tpa bd_port config --portNo=4 --shutdown=0 --tpid=0x8100 --aft=0\n--fbi=10 --bs=0 --trusted=0 --cfi=0 --pri=0 --tc=0 --pindex=0 --cub=0 -",
        "Input": "-pcp2tct=0 --tc2cost=0\n3.emac1 의 ingress packet 을 emac2 로 mirror 설정한다.\ntc-tpa mirror add --ingress_mirror=0x2 --egress_mirror=0 --portNo=1\n4. Tester_1,2 -> emac1,2 로 traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP  VID\nT1  00:00:00:00:11:11  00:00:00:00:22:22  100.1.1.1  200.1.1.1  10\nT2  00:00:00:00:22;22  00:00:00:00:11:11  200.1.1.1  100.1.1.1  10",
        "Expected Result": "3.emac1 의 ingress packet 이 emac2 로 올바르게 mirror 된다.",
        "Test output": "3.emac1 의 ingress packet 이 emac2 로 올바르게 mirror 된다.",
        "page": 371,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:00:00:00:11:11",
            "DMAC": "00:00:00:00:22:22",
            "SIP": "100.1.1.1",
            "DIP": "200.1.1.1"
          },
          {
            "Port": "T2",
            "SMAC": "00:00:00:00:22;22",
            "DMAC": "00:00:00:00:11:11",
            "SIP": "200.1.1.1",
            "DIP": "100.1.1.1"
          }
        ]
      },
      {
        "Test case ID": "MRPM-009",
        "Description": "설정 삭제 기능을 제공해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.mirror 를 설정한다.\n2.mirror 를 조회한다.\n3.mirror 설정을 추가한다.",
        "Sequence": "4.mirror 를 조회한다.\n5.mirror 를 삭제한다.\n6.mirror 를 조회한다.\n1.\ntc-tpa mirror add --ingress_mirror=0x4 --egress_mirror=0 --portNo=1\n2.\ntc-tpa mirror show –all\n3.",
        "Input": "tc-tpa mirror add --ingress_mirror=0x4 --egress_mirror=0 --portNo=2\n4.\ntc-tpa mirror show –all\n5.\ntc-tpa mirror del --portNo=2 --ingress_mirror\n1.mirror 가 올바르게 조회된다.",
        "Expected Result": "4.mirror 가 올바르게 추가된다.\n6.mirror 가 올바르게 삭제된다\n1. mirror 가 올바르게 조회된다.",
        "Test output": "4. mirror 가 올바르게 추가된다.",
        "page": 373,
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "MGTOP-001",
        "Description": "경우 각 VLAN Bridge 에 동일한 Multicast Group 을 등록할 수 있다",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n5.Tester_2 에서 226.1.1.2 를 leave 한다.\n2. Tester_2 의 src mac 을 TPA 에 등록한다.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2\n4.multicast traffic Tester_2 로 올바르게 join 된다.",
        "Expected Result": "5. multicast traffic Tester_2 로 올바르게 leave 된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 375,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGTOP-002",
        "Description": "Group 을 생성해야 하며, 멤버 등록 여부와 상관없이 유지되어야 한다.\nMulticast Group 주소는 VLAN Bridge 단위로 유일해야 한다",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2",
        "Expected Result": "4.multicast traffic Tester_2 로 올바르게 join 된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 376,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGTOP-003",
        "Description": "대상으로 한다. VLAN Bridge 상에 등록된 Physical Port 가 한 개 이하인\n경우 Multicast Group 을 등록할 수 없다",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2",
        "Expected Result": "4.multicast traffic Tester_2 로 올바르게 join 된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 377,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGTOP-004",
        "Description": "TPA 는 Multicast Routing 처리 및 관련 Protocol 지원하지 않는다",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 378,
        "Input_table": []
      },
      {
        "Test case ID": "MGSNOOP-001",
        "Description": "HIF 로 PUNT 할 수 있어야 한다. 이때, PUNT Reason 은 igmp 류‘예>\npunt_igmp, snoop_upper 등’로 지정되어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2",
        "Expected Result": "4.IGMP traffic 이 올바르게 punt 된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 379,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGSNOOP-002",
        "Description": "사용하는 Linux 플랫폼에서 IGMP 프로토콜 처리를 담당하는 경우, 채널\n번호는 N 로 지정).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2",
        "Expected Result": "4.multicast traffic Tester_2 로 올바르게 join 된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 380,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGSNOOP-003",
        "Description": "조회가 가능해야 한다. Feature 비 활성화 설정 시 IGMP Snooping\n기능은 동작되지 않아야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2",
        "Expected Result": "4.multicast traffic Tester_2 로 올바르게 join 된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 381,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGPROTO-001",
        "Description": "호환되지 않는다",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.\n3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.",
        "Sequence": "4.Tester_2 에서 IGMPv2 226.1.1.2 를 join 한다.\n5.Tester_2 에서 IGMPv2 226.1.1.2 를 leave 한다.\n6.Tester_2 에서 IGMPv1 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2\n4.multicast traffic Tester_2 로 IGMPv2 가 올바르게 join 된다.",
        "Expected Result": "5. multicast traffic Tester_2 로 IGMPv2 가 올바르게 leave 된다.\n6. multicast traffic Tester_2 로 IGMPv1 가 올바르게 join 된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 382,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGPROTO-002",
        "Description": "여부를 따른다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. CS chip 에서 확인 필요",
        "page": 383,
        "Input_table": []
      },
      {
        "Test case ID": "MGMMGMT-001",
        "Description": "메시지를 수신한 Port 를 Router Port 로 식별하고 Router Port List 에\n추가 관리할 수 있어야 한다",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "1.Tester_3 에서 TPA 로 router advertisement 메시지를 송신한다.\n1.Tester_3 에서 TPA 로 router advertisement 메시지를 송신한다.",
        "Input": "",
        "Expected Result": "1. router advertisement 메시지를 올바르게 수신한다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 384,
        "Input_table": []
      },
      {
        "Test case ID": "MGMMGMT-002",
        "Description": "Membership Report 메시지 수신 시, TPA 는 메시지를 수신한 Port 를\n해당 Multicast Group 의 멤버로 등록해야 하며, 소스로부터 수신한\n패킷을 등록된 멤버로 전송할 수 있어야 한다",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2",
        "Expected Result": "4.multicast traffic Tester_2 로 올바르게 join 된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 385,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGMMGMT-003",
        "Description": "Host 로 포워딩\n- TPA: 타이머 만료 시 Host 를 Multicast Group 에서 삭제 및 Multicast\n패킷 포워딩 중지\n멤버십이 제거되면 해당 그룹의 Multicast 패킷은 제거된 Host 로\n전송되지 않을 수 있어야 한다.\nMulticast 패킷 miss 에 해당하는 경우 특정 VLAN 에 대한 BD 설정의\nMulticast Miss 설정을 따른다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 IGMPv1 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac 1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2\n4. multicast traffic Tester_2 로 IGMPv1 가 올바르게 join 되며, 타이머",
        "Expected Result": "만료 시 Host 를 Multicast Group 에서 삭제 및 Multicast 패킷 포워딩을\n중지한다.",
        "Test output": "",
        "page": 386,
        "Test result": "",
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGMMGMT-004",
        "Description": "원하지 않는 경우 ‘Leave Group’ 메시지를 송신하고, TPA 는 해당 Host 를\nMulticast Group 에서 즉시 제거해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 388,
        "Input_table": []
      },
      {
        "Test case ID": "MGMMGMT-005",
        "Description": "수신한 경우 TPA 는 해당 응답한 Host 의 Membership Lifetime 을\n갱신해야 한다\n- 응답하지 않은 Host 에 대해서는 Membership 을 삭제한다\n- 삭제된 멤버에 대해 멀티캐스트 패킷을 포워딩 하지 않을 수 있어야\n한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. linuxmaster 우선 시험 후 FreeRTOS 에서 시험예정",
        "page": 389,
        "Input_table": []
      },
      {
        "Test case ID": "MGFWD-001",
        "Description": "한다. 그룹에 가입된 멤버십 조회가 가능해야 한다",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2",
        "Expected Result": "4.multicast traffic Tester_2 로 올바르게 join 된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 390,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGFWD-002",
        "Description": "모두 Leave 한 경우), TPA 는 소스로부터 수신한 Multicast 패킷을 폐기할\n수 있어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n5. Tester_2 에서 226.1.1.2 를 leave 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2\n4.multicast traffic Tester_2 로 올바르게 join 된다.",
        "Expected Result": "5. TPA 는 소스로부터 수신한 Multicast 패킷을 폐기해야 한다",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 391,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGCFG-001",
        "Description": "대해 Multicast Group 을 생성해야 한다. Group 생성은 정적인 방식으로\n처리되며, TPA 의 Lifetime 동안 유지되어야 한다",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2\n4. multicast traffic Tester_2 로 IGMPv1 가 올바르게 join 되며, 타이머",
        "Expected Result": "만료 시 Host 를 Multicast Group 에서 삭제 및 Multicast 패킷 포워딩을\n중지한다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 392,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGCFG-002",
        "Description": "IGMP 활성화/비활성화 기능은 Build 시에 지정되며, 활성화된 Feature\n목록을 확인할 수 있어야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "1.Tester_1 에서 vlan 이 21 인 multicast traffic 을 생성한다.\n2.Tester_2 의 src mac 을 TPA 에 등록한다.",
        "Sequence": "3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\n4.Tester_2 에서 226.1.1.2 를 join 한다.\n2.\ntc-tpa bd add --vlan=21 --fpl=0x1f --utl=0 --mh=0 --mm=2 --uh=0 --\num=0 --msta=0\ntc-tpa bd_mac add --mac=00:10:94:00:00:01 --polist=0x2 --vlan=21 --",
        "Input": "hact=0 --tc=0 --hifch=0\n3.Tester_1 -> emac1 로 multicast traffic 을 인가한다.\nPort  SMAC  DMAC  SIP  DIP\nT1  00:24:27:88:01:21  01:00:5E:01:01:02  192.0.20.1  226.1.1.2",
        "Expected Result": "4.multicast traffic Tester_2 로 올바르게 join 된다.",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 393,
        "Input_table": [
          {
            "Port": "T1",
            "SMAC": "00:24:27:88:01:21",
            "DMAC": "01:00:5E:01:01:02",
            "SIP": "192.0.20.1",
            "DIP": "226.1.1.2"
          }
        ]
      },
      {
        "Test case ID": "MGCFG-003",
        "Description": "Multicast Group 단위의 ‘Fast Leave’를 지원해야 한다.",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 394,
        "Input_table": []
      },
      {
        "Test case ID": "MGCFG-004",
        "Description": "값을 설정할 수 있어야 한다 (디폴트: 3 분. 변경 가능).",
        "Test Environment": "2.1",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. FreeRTOS 상 IGMP 미동작(Linux Master OK. T 사 작업 필요)",
        "page": 395,
        "Input_table": []
      },
      {
        "Test case ID": "MGMT-001",
        "Description": "TPA 는 OBM 을 제공해야 한다.",
        "Test Environment": "",
        "Test Method": "REVIEW",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "PASS",
        "page": 396,
        "Input_table": []
      },
      {
        "Test case ID": "MGMT-002",
        "Description": "- 정적 감지 (Pre-Configured): TPA 의 각 Platform 은 사전에 미리\n설정된 역할에 따라 Master 또는 Slave 로 동작할 수 있어야 한다.",
        "Test Environment": "",
        "Test Method": "REVIEW",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "PASS",
        "page": 397,
        "Input_table": []
      },
      {
        "Test case ID": "MGMT-003",
        "Description": "(Main-Box)를 통해 메시지 전달 기반의 처리 기능을 제공해야 한다.",
        "Test Environment": "",
        "Test Method": "REVIEW",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "PASS",
        "page": 398,
        "Input_table": []
      },
      {
        "Test case ID": "MGMT-004",
        "Description": "",
        "page": 399,
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "",
        "Input_table": []
      },
      {
        "Test case ID": "MGMT-005",
        "Description": "동안 Platform 송신자가 Mail-Box 의 해당 채널에 데이터를 기록하지\n않도록 Overwriting 방지 기능을 제공해야 한다.",
        "Test Environment": "",
        "Test Method": "REVIEW",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "PASS",
        "page": 400,
        "Input_table": []
      },
      {
        "Test case ID": "MGMT-006",
        "Description": "제공해야 한다. 특정 Slave 에 의해 요청된 명령이 처리되는 동안 다른\nSlave 로부터의 요청을 수락하지 않아야 한다.",
        "Test Environment": "",
        "Test Method": "REVIEW",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "PASS",
        "page": 401,
        "Input_table": []
      },
      {
        "Test case ID": "MGMT-007",
        "Description": "- 명령 타임 아웃 (timeout): 1 초 (변경 가능).\n- 명령 재실행 (retry): 3 회 (변경 가능).",
        "Test Environment": "",
        "Test Method": "",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "NA",
        "Test result": "-. TBD",
        "page": 402,
        "Input_table": []
      },
      {
        "Test case ID": "MGMT-008",
        "Description": "하고, 연결 오류가 발생하는 경우 재 복구할 수 있는 시나리오를\n제공해야 한다.",
        "Test Environment": "",
        "Test Method": "REVIEW",
        "Preconditions": "",
        "Sequence": "",
        "Input": "",
        "Expected Result": "",
        "Test output": "",
        "Test result": "PASS",
        "page": 403,
        "Input_table": []
      }
    ]
  }